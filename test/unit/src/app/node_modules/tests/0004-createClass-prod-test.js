/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("createClass-prod", () => {
    "use strict";

    var vrdom;

    beforeAll((done) => {
        require.undef("vrdom");

        require(["vrdom"], function() {
            vrdom = arguments[0];

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should instantiace an vrdom Component", () => {
        var ComponentClass = vrdom.createClass({
            render: function() {
                return <div />;
            }
        });

        var instance = new ComponentClass();
        expect(instance).toEqual(jasmine.any(vrdom.Component));
    });

    it("should not enforce `render` specification", () => {
        expect(() => vrdom.createClass({})).not.toThrow();
    });

    it("should babel-plugin-transform-react-display-name", () => {
        var ComponentClass = vrdom.createClass({
            render: function() {
                return <div />;
            },
        });

        expect(ComponentClass.displayName).toBe("ComponentClass");
    });

    it("should implement statics", () => {
        var statics = {
            string: "string",
            number: 0,
            "null": null,
            "undefined": undefined,
            "Array": [],
            "Object": {},
            "Object.create(null)": Object.create(null),
            method: function() {
                return this;
            }
        };

        var ComponentClass = vrdom.createClass({
            statics: statics,

            render: function() {
                return <div />;
            },
        });

        expect(ComponentClass.statics).toBe(undefined);

        // eslint-disable-next-line guard-for-in
        for (var key in statics) {
            expect(ComponentClass[key]).toBe(statics[key]);
        }
        expect(ComponentClass.method()).toBe(ComponentClass);
    });

    it("should implement getDefaultProps() as defaultProps", () => {
        var defaultProps = { string: "string" };

        var ComponentClass = vrdom.createClass({
            getDefaultProps: function() {
                return defaultProps;
            },
            render: function() {
                return <div />;
            },
        });

        expect(ComponentClass.defaultProps).toBe(defaultProps);
    });

    it("should implement getInitialState()", () => {
        [ { string: "string" }, null].forEach(function(initialState) {
            var ComponentClass = vrdom.createClass({
                getInitialState: function() {
                    return initialState;
                },
                render: function() {
                    return <div />;
                },
            });

            var instance = new ComponentClass();
            expect(instance.state).toBe(initialState);
        });
    });

    it("should not refuse non objects or array as initial state", () => {
        [ "string", 0, undefined, [] ].forEach(function(initialState) {
            var ComponentClass = vrdom.createClass({
                getInitialState: function() {
                    return initialState;
                },
                render: function() {
                    return <div />;
                },
            });

            expect(() => new ComponentClass()).not.toThrow();
        });
    });

});