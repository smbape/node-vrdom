/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("isValidElement-prod", () => {
    "use strict";

    var vrdom;
    var Component;

    beforeAll((done) => {
        require.undef("vrdom");

        require(["vrdom"], function() {
            vrdom = arguments[0];

            Component = class extends vrdom.Component {
                render() {
                    return <b/>;
                }
            };

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("identifies valid elements", () => {
        // createlement
        expect(vrdom.isValidElement(vrdom.createElement("div"))).toBe(true);
        expect(vrdom.isValidElement(vrdom.createElement("Component"))).toBe(true);
        expect(vrdom.isValidElement(<div />)).toBe(true);
        expect(vrdom.isValidElement(<Component />)).toBe(true);

        // undefined, null
        expect(vrdom.isValidElement(null)).toBe(false);
        expect(vrdom.isValidElement(undefined)).toBe(false);

        // boolean
        expect(vrdom.isValidElement(true)).toBe(false);
        expect(vrdom.isValidElement(false)).toBe(false);

        // number
        expect(vrdom.isValidElement(0)).toBe(false);
        expect(vrdom.isValidElement(1)).toBe(false);

        // string
        expect(vrdom.isValidElement("")).toBe(false);
        expect(vrdom.isValidElement("string")).toBe(false);

        // function
        expect(vrdom.isValidElement(Function.prototype)).toBe(false);
        expect(vrdom.isValidElement(Component)).toBe(false);

        // Array
        expect(vrdom.isValidElement([])).toBe(false);
        expect(vrdom.isValidElement([<Component />])).toBe(false);

        // object outside createElement
        expect(vrdom.isValidElement({})).toBe(false);
        expect(vrdom.isValidElement(Object.create(null))).toBe(false);
        expect(vrdom.isValidElement({ type: "div", props: {} })).toBe(false);

    });
});