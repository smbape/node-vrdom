/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("render-update-prod", () => {
    "use strict";

    var vrdom;
    var PropTypes;

    var slice = Array.prototype.slice;

    function removeCommentNodes(childNodes) {
        return slice.call(childNodes).filter(node => node.nodeType !== Node.COMMENT_NODE);
    }

    beforeAll((done) => {
        require.undef("vrdom");

        require(["vrdom"], function() {
            vrdom = arguments[0];
            PropTypes = vrdom.PropTypes;

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should update properties and attributes", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div />, container);
        expect(domNode.className).toBe("");

        vrdom.render(<div id="id" className="className" data-custom="data-custom" />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.id).toBe("id");
        expect(domNode.className).toBe("className");
        expect(domNode.getAttribute("data-custom")).toBe("data-custom");

        vrdom.render(<div id="id2" className="className2" data-custom="data-custom2" />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.id).toBe("id2");
        expect(domNode.className).toBe("className2");
        expect(domNode.getAttribute("data-custom")).toBe("data-custom2");

        vrdom.render(<div id="id" className="className" data-custom="data-custom" />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.id).toBe("id");
        expect(domNode.className).toBe("className");
        expect(domNode.getAttribute("data-custom")).toBe("data-custom");

        vrdom.render(<div id={ null } className={ null } data-custom={ null } />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.id).toBe("");
        expect(domNode.className).toBe("");
        expect(domNode.getAttribute("data-custom")).toBe(null);

        vrdom.render(<div id="id" className="className" data-custom="data-custom" />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.id).toBe("id");
        expect(domNode.className).toBe("className");
        expect(domNode.getAttribute("data-custom")).toBe("data-custom");

        vrdom.render(<div />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.id).toBe("");
        expect(domNode.className).toBe("");
        expect(domNode.getAttribute("data-custom")).toBe(null);
    });

    it("should update custom attributes on custom elements", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<custom-element string="value"/>, container);
        expect(domNode.attributes.length).toBe(1);
        expect(domNode.getAttribute("string")).toBe("value");

        vrdom.render(<custom-element string={null}/>, container);
        expect(domNode.attributes.length).toBe(0);
        expect(domNode.getAttribute("string")).toBe(null);

        vrdom.render(<custom-element string="value"/>, container);
        expect(domNode.attributes.length).toBe(1);
        expect(domNode.getAttribute("string")).toBe("value");

        vrdom.render(<custom-element />, container);
        expect(domNode.attributes.length).toBe(0);
        expect(domNode.getAttribute("string")).toBe(null);
    });

    it("should treat null/undefined attributes as removed attributes", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div />, container);

        spyOn(domNode, "setAttribute").and.callThrough();
        spyOn(domNode, "removeAttribute").and.callThrough();

        vrdom.render(<div title={ null } />, container);
        expect(domNode.getAttribute("title")).toBe(null);

        vrdom.render(<div title={ undefined } />, container);
        expect(domNode.getAttribute("title")).toBe(null);

        expect(domNode.setAttribute.calls.count()).toBe(0);
        expect(domNode.removeAttribute.calls.count()).toBe(0);

        vrdom.render(<div title="title" />, container);
        expect(domNode.getAttribute("title")).toBe("title");
        expect(domNode.setAttribute.calls.count()).toBe(1);
        expect(domNode.removeAttribute.calls.count()).toBe(0);

        vrdom.render(<div title={ null } />, container);
        expect(domNode.getAttribute("title")).toBe(null);
        expect(domNode.setAttribute.calls.count()).toBe(1);
        expect(domNode.removeAttribute.calls.count()).toBe(1);

        vrdom.render(<div title="title" />, container);
        expect(domNode.getAttribute("title")).toBe("title");
        expect(domNode.setAttribute.calls.count()).toBe(2);
        expect(domNode.removeAttribute.calls.count()).toBe(1);

        vrdom.render(<div title={ undefined } />, container);
        expect(domNode.getAttribute("title")).toBe(null);
        expect(domNode.setAttribute.calls.count()).toBe(2);
        expect(domNode.removeAttribute.calls.count()).toBe(2);

        vrdom.render(<div />, container);
        expect(domNode.getAttribute("title")).toBe(null);
        expect(domNode.setAttribute.calls.count()).toBe(2);
        expect(domNode.removeAttribute.calls.count()).toBe(2);
    });

    it("should call setAttribute/removeAttribute if necessary", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div id="id"/>, container);

        spyOn(domNode, "setAttribute").and.callThrough();
        spyOn(domNode, "removeAttribute").and.callThrough();

        vrdom.render(<div id="id"/>, container);
        expect(domNode.setAttribute.calls.count()).toBe(0);
        expect(domNode.removeAttribute.calls.count()).toBe(0);
        expect(domNode.id).toBe("id");

        vrdom.render(<div id=""/>, container);
        expect(domNode.setAttribute.calls.count()).toBe(1);
        expect(domNode.removeAttribute.calls.count()).toBe(0);
        expect(domNode.id).toBe("");

        vrdom.render(<div />, container);
        expect(domNode.setAttribute.calls.count()).toBe(1);
        expect(domNode.removeAttribute.calls.count()).toBe(1);
        expect(domNode.id).toBe("");

        vrdom.render(<div id={ null } />, container);
        expect(domNode.setAttribute.calls.count()).toBe(1);
        expect(domNode.removeAttribute.calls.count()).toBe(1);
        expect(domNode.id).toBe("");

        vrdom.render(<div id="" />, container);
        expect(domNode.setAttribute.calls.count()).toBe(2);
        expect(domNode.removeAttribute.calls.count()).toBe(1);
        expect(domNode.id).toBe("");

        vrdom.render(<div id="id" />, container);
        expect(domNode.setAttribute.calls.count()).toBe(3);
        expect(domNode.removeAttribute.calls.count()).toBe(1);
        expect(domNode.id).toBe("id");

        vrdom.render(<div />, container);
        expect(domNode.setAttribute.calls.count()).toBe(3);
        expect(domNode.removeAttribute.calls.count()).toBe(2);
        expect(domNode.id).toBe("");

    });

    it("should update children", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div>text</div>, container);
        expect(domNode.innerHTML).toBe("text");

        vrdom.render(<div>another text</div>, container);
        expect(domNode.innerHTML).toBe("another text");

        vrdom.render(<div>text</div>, container);
        expect(domNode.innerHTML).toBe("text");

        vrdom.render(<div><span>text</span></div>, container);
        expect(domNode.firstChild.innerHTML).toBe("text");

        vrdom.render(<div><span>another text</span></div>, container);
        expect(domNode.firstChild.innerHTML).toBe("another text");

        vrdom.render(<div><span>text</span></div>, container);
        expect(domNode.firstChild.innerHTML).toBe("text");

        vrdom.render(<div>text</div>, container);
        expect(domNode.innerHTML).toBe("text");
    });

    it("should update innerHTML", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div dangerouslySetInnerHTML={{__html: "text"}} />, container);
        expect(domNode.innerHTML).toBe("text");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "another text"}} />, container);
        expect(domNode.innerHTML).toBe("another text");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "text"}} />, container);
        expect(domNode.innerHTML).toBe("text");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "<span>text</span>"}} />, container);
        expect(domNode.firstChild.innerHTML).toBe("text");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "<span>another text</span>"}} />, container);
        expect(domNode.firstChild.innerHTML).toBe("another text");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "<span>text</span>"}} />, container);
        expect(domNode.firstChild.innerHTML).toBe("text");

        // should not reset innerHTML if no changes
        var span = domNode.firstChild;
        vrdom.render(<div dangerouslySetInnerHTML={{__html: "<span>text</span>"}} />, container);
        expect(domNode.firstChild).toBe(span);
        span = 0;

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "text"}} />, container);
        expect(domNode.innerHTML).toBe("text");
    });

    it("should update children to innerHTML", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div><span>child</span></div>, container);

        expect(domNode.tagName).toBe("DIV");
        expect(domNode.firstChild.tagName).toBe("SPAN");
        expect(domNode.firstChild.innerHTML).toBe("child");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "child"}} />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.innerHTML).toBe("child");

        vrdom.render(<div><span>child</span></div>, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.firstChild.tagName).toBe("SPAN");
        expect(domNode.firstChild.innerHTML).toBe("child");
    });

    it("should update children from innerHTML", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div dangerouslySetInnerHTML={{__html: "child"}} />, container);

        expect(domNode.tagName).toBe("DIV");
        expect(domNode.innerHTML).toBe("child");

        vrdom.render(<div><span>child</span></div>, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.firstChild.tagName).toBe("SPAN");
        expect(domNode.firstChild.innerHTML).toBe("child");

        vrdom.render(<div dangerouslySetInnerHTML={{__html: "child"}} />, container);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.innerHTML).toBe("child");
    });

    it("should update style property", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div style={{
            color: "rgb(255, 255, 255)",
            background: "rgb(255, 100, 0)",
            backgroundPosition: "10px 10px",
            "background-size": "cover",
            "line-height": 0.5,
            padding: 5,
            top: 100,
            left: "100%"
        }} />, container);
        var style = domNode.style;

        expect(style.color).toBe("rgb(255, 255, 255)");
        expect(style.backgroundColor).toBe("rgb(255, 100, 0)");
        expect(style.backgroundPosition).toBe("10px 10px");
        expect(style.backgroundSize).toBe("cover");
        expect(style.lineHeight).toBe("0.5");
        expect(style.padding).toBe("5px");
        expect(style.top).toBe("100px");
        expect(style.left).toBe("100%");

        vrdom.render(<div style={{
            color: null,
            background: "rgb(127, 127, 127)",
            backgroundPosition: true,
            "background-size": ""
        }} />, container);

        expect(style.color).toBe("");
        expect(style.backgroundColor).toBe("rgb(127, 127, 127)");
        expect(style.backgroundPosition).toBe("");
        expect(style.backgroundSize).toBe("");
        expect(style.lineHeight).toBe("");
        expect(style.padding).toBe("");
        expect(style.top).toBe("");
        expect(style.left).toBe("");

        vrdom.render(<div style={{
            color: "rgb(255, 255, 255)",
            background: "rgb(255, 100, 0)",
            backgroundPosition: "10px 10px",
            "background-size": "cover",
            "line-height": 0.5,
            padding: 5,
            top: 100,
            left: "100%"
        }} />, container);

        style = domNode.style;

        expect(style.color).toBe("rgb(255, 255, 255)");
        expect(style.backgroundColor).toBe("rgb(255, 100, 0)");
        expect(style.backgroundPosition).toBe("10px 10px");
        expect(style.backgroundSize).toBe("cover");
        expect(style.lineHeight).toBe("0.5");
        expect(style.padding).toBe("5px");
        expect(style.top).toBe("100px");
        expect(style.left).toBe("100%");

        vrdom.render(<div />, container);

        expect(style.color).toBe("");
        expect(style.backgroundColor).toBe("");
        expect(style.backgroundPosition).toBe("");
        expect(style.backgroundSize).toBe("");
        expect(style.lineHeight).toBe("");
        expect(style.padding).toBe("");
        expect(style.top).toBe("");
        expect(style.left).toBe("");

    });

    it("should keep interpollated text at its place", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<div>{ "before" }<div />{ "middle" }{ "end" }</div>, container);
        var childNodes = removeCommentNodes(domNode.childNodes);

        spyOn(domNode, "insertBefore").and.callThrough();
        spyOn(domNode, "appendChild").and.callThrough();
        spyOn(domNode, "replaceChild").and.callThrough();
        spyOn(domNode, "removeChild").and.callThrough();

        var before = childNodes[0];
        var middle = childNodes[2];
        var end = childNodes[3];

        expect(before.data).toBe("before");
        expect(middle.data).toBe("middle");
        expect(end.data).toBe("end");

        vrdom.render(<div>{ "début" }<div />{ "milieu" }{ "fin" }</div>, container);

        // nothing should be added or removed
        expect(domNode.insertBefore.calls.count()).toBe(0);
        expect(domNode.appendChild.calls.count()).toBe(0);
        expect(domNode.replaceChild.calls.count()).toBe(0);
        expect(domNode.removeChild.calls.count()).toBe(0);
        expect(removeCommentNodes(domNode.childNodes)).toEqual(childNodes);

        expect(before.data).toBe("début");
        expect(middle.data).toBe("milieu");
        expect(end.data).toBe("fin");

        vrdom.render(<div>{ null }<div />{ null }{ null }</div>, container);

        // should remove null nodes
        expect(domNode.insertBefore.calls.count()).toBe(0);
        expect(domNode.appendChild.calls.count()).toBe(0);
        expect(domNode.replaceChild.calls.count()).toBe(0);
        expect(domNode.removeChild.calls.count()).toBe(3);
        expect(removeCommentNodes(domNode.childNodes).length).toBe(1);

        childNodes = null;
    });

    it("should replace DOM node", () => {
        var container = document.createElement("div");

        vrdom.render(<a />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("A");

        vrdom.render(<b />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("B");

        vrdom.render(vrdom.DOM.div(), container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("DIV");

        vrdom.render(vrdom.DOM.p(), container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("P");

        vrdom.render(<a />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("A");

    });

    it("should switch between DOM element and Componsite element", () => {
        class Component extends vrdom.Component {
            render() {
                switch (this.props.type) {
                    case "a":
                        return <a />;
                    case "b":
                        return <b />;
                    case "p":
                        return vrdom.DOM.p();
                    default:
                        return vrdom.DOM.div();
                }
            }
        }

        var container = document.createElement("div");

        vrdom.render(<Component />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("DIV");

        vrdom.render(<Component type="p" />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("P");

        vrdom.render(<Component type="a" />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("A");

        vrdom.render(<Component type="b" />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("B");

        vrdom.render(<Component />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("DIV");

    });

    it("should always call render callback with context", () => {
        var container = document.createElement("div");
        var calls = 0;

        vrdom.render(<a />, container, function() {
            expect(this.tagName).toBe("A"); // eslint-disable-line no-invalid-this
            calls++;
        });

        vrdom.render(<a />, container, function() {
            expect(this.tagName).toBe("A"); // eslint-disable-line no-invalid-this
            calls++;
        });

        vrdom.render(<b />, container, function() {
            expect(this.tagName).toBe("B"); // eslint-disable-line no-invalid-this
            calls++;
        });

        class Component extends vrdom.Component {
            render() {
                return <div />;
            }
        }

        vrdom.render(<Component />, container, function() {
            expect(this).toEqual(jasmine.any(Component)); // eslint-disable-line no-invalid-this
            calls++;
        });

        expect(calls).toBe(4);
    });

    it("should use default props", () => {
        class Component extends vrdom.Component {
            static defaultProps = {prop: "value"};

            render() {
                return <span />;
            }
        }

        var container = document.createElement("div");

        var props = {};
        var instance = vrdom.render(vrdom.createElement(Component, props), container);
        expect(instance.props).not.toBe(props);
        expect(instance.props.prop).toBe("value");

        vrdom.render(<Component prop="text" />, container);
        expect(instance.props.prop).toBe("text");

        vrdom.render(<Component/>, container);
        expect(instance.props.prop).toBe("value");

        vrdom.render(<Component prop={ null } />, container);
        expect(instance.props.prop).toBe(null);
    });

    it("should not remount if key changed", () => {
        var logs = [];
        class Component extends vrdom.Component {
            componentDidMount() {
                logs.push("componentDidMount");
            }

            componentDidUpdate() {
                logs.push("componentDidUpdate");
            }

            componentWillUnmount() {
                logs.push("componentWillUnmount");
            }

            render() {
                return <div>{ this.props.children }</div>;
            }
        }
        var container = document.createElement("div");
        var domNode;

        vrdom.render(<Component key="a" children="child"/>, container);
        expect(logs).toEqual(["componentDidMount"]);
        domNode = container.firstChild;
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.innerHTML).toBe("child");

        vrdom.render(<Component key="b" children="child"/>, container);
        expect(logs).toEqual(["componentDidMount", "componentDidUpdate"]);
        expect(container.firstChild).toBe(domNode);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.innerHTML).toBe("child");

        vrdom.render(<Component key="b" children="changed"/>, container);
        expect(logs).toEqual(["componentDidMount", "componentDidUpdate", "componentDidUpdate"]);
        expect(container.firstChild).toBe(domNode);
        expect(domNode.tagName).toBe("DIV");
        expect(domNode.innerHTML).toBe("changed");
    });

    it("should update if element did changed", () => {
        var childRenders = 0;

        class Child extends vrdom.Component {
            shouldComponentUpdate() {
                return true;
            }

            render() {
                childRenders++;
                return <div />;
            }
        }

        var parentRenders = 0;

        class Parent extends vrdom.Component {
            render() {
                parentRenders++;
                return <div>{ this.props.children }</div>;
            }
        }

        var container = document.createElement("div");
        vrdom.render(<Parent><Child /></Parent>, container);
        vrdom.render(<Parent><Child /></Parent>, container);

        expect(parentRenders).toBe(2);
        expect(childRenders).toBe(2);
    });

    it("should not re-render if shouldComponentUpdate return false, but still update props and state", () => {
        var childRenders = 0;

        class Child extends vrdom.Component {
            shouldComponentUpdate() {
                return true;
            }

            render() {
                childRenders++;
                return <div />;
            }
        }

        var parentRenders = 0;

        class Parent extends vrdom.Component {
            shouldComponentUpdate() {
                return false;
            }

            render() {
                parentRenders++;
                return <Child />;
            }
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<Parent />, container);
        expect(parentRenders).toBe(1);
        expect(childRenders).toBe(1);
        expect(instance.props).toEqual({});

        vrdom.render(<Parent prop="value" />, container);
        expect(parentRenders).toBe(1);
        expect(childRenders).toBe(1);
        expect(instance.props).toEqual({ prop: "value" });

        instance.setState({ key: "value" });
        expect(parentRenders).toBe(1);
        expect(childRenders).toBe(1);
        expect(instance.props).toEqual({ prop: "value" });
        expect(instance.state).toEqual({ key: "value" });

        instance.setState();
        expect(parentRenders).toBe(1);
        expect(childRenders).toBe(1);
        expect(instance.props).toEqual({ prop: "value" });
        expect(instance.state).toEqual({ key: "value" });
    });

    it("should not update if element did not changed", () => {
        // this is a huge perf optimization

        var childRenders = 0;

        class Child extends vrdom.Component {
            shouldComponentUpdate() {
                return true;
            }

            render() {
                childRenders++;
                return <div />;
            }
        }

        var parentRenders = 0;

        class Parent extends vrdom.Component {
            render() {
                parentRenders++;
                return <div>{ this.props.children }</div>;
            }
        }

        var child = <Child />;

        var container = document.createElement("div");
        vrdom.render(<div><Parent>{ child }</Parent></div>, container);
        expect(parentRenders).toBe(1);
        expect(childRenders).toBe(1);

        var parent = <div><Parent>{ child }</Parent></div>;

        vrdom.render(parent, container);
        expect(parentRenders).toBe(2);
        expect(childRenders).toBe(1);

        vrdom.render(parent, container);
        expect(parentRenders).toBe(2);
        expect(childRenders).toBe(1);
    });

    it("should still update refs if shouldComponentUpdate gives false", () => {
        class Child extends vrdom.Component {
            shouldComponentUpdate() {
                return false;
            }

            render() {
                return <div>{ this.props.children }</div>;
            }
        }

        class Parent extends vrdom.Component {
            render() {
                if (this.props.swap) {
                    return (
                        <div>
                            <Child ref="child0" key="B">B (ignored)</Child>
                            <Child ref="child1" key="A">A (ignored)</Child>
                        </div>
                    );
                }

                return (
                    <div>
                        <Child ref="child0" key="A">A</Child>
                        <Child ref="child1" key="B">B</Child>
                    </div>
                );
            }
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<Parent />, container);

        var child00 = vrdom.findDOMNode(instance.refs.child0);
        var child01 = vrdom.findDOMNode(instance.refs.child1);

        expect(child00.innerHTML).toBe("A");
        expect(child01.innerHTML).toBe("B");

        vrdom.render(<Parent swap={ true } />, container);

        var child10 = vrdom.findDOMNode(instance.refs.child0);
        var child11 = vrdom.findDOMNode(instance.refs.child1);

        expect(child00).toBe(child11);
        expect(child01).toBe(child10);

        expect(removeCommentNodes(container.firstChild.childNodes)).toEqual([child10, child11]);
        expect(child10.innerHTML).toBe("B");
        expect(child11.innerHTML).toBe("A");
    });

    it("should should define replaceState with createClass", () => {
        var Component = vrdom.createClass({
            getInitialState: function() {
                return {a: 1};
            },

            render: function() {
                return <div />;
            }
        });

        var container = document.createElement("div");
        var instance = vrdom.render(<Component />, container);

        var state = {b: 2};
        instance.replaceState(state);
        expect(instance.state).not.toHaveOwnProperty("a");
        expect(instance.state).toEqual(state);
    });

    it("should not keep reference of state in setState", () => {
        class Dummy {
            constructor(prop) {
                this.prop = prop;
            }

            method() {} // eslint-disable-line no-empty-function
        }

        var Component = vrdom.createClass({
            getInitialState: function() {
                return new Dummy("prop");
            },
            render: function() {
                return <div />;
            },
        });

        var container = document.createElement("div");
        var instance = vrdom.render(<Component />, container);
        expect(instance.state.prop).toBe("prop");
        expect(instance.state.method).toBeTypeOf("function");

        instance.setState({prop: "new"});
        expect(instance.state.prop).toBe("new");
        expect(instance.state.method).not.toBeTypeOf("function");
    });

    it("should not rely on owner for update", () => {
        var Child = vrdom.createClass({
            render: function() {
                return <div />;
            },

            componentWillMount: jasmine.createSpy("componentWillMount"),
            componentWillUnmount: jasmine.createSpy("componentWillUnmount")
        });

        var Parent = vrdom.createClass({
            render: function() {
                return this.props.children || <Child />;
            }
        });

        var container = document.createElement("div");

        vrdom.render(<Parent />, container);
        expect(Child.prototype.componentWillMount.calls.count()).toBe(1);
        expect(Child.prototype.componentWillUnmount.calls.count()).toBe(0);

        vrdom.render(<Parent><Child /></Parent>, container);
        expect(Child.prototype.componentWillMount.calls.count()).toBe(1);
        expect(Child.prototype.componentWillUnmount.calls.count()).toBe(0);

        vrdom.render(<Parent />, container);
        expect(Child.prototype.componentWillMount.calls.count()).toBe(1);
        expect(Child.prototype.componentWillUnmount.calls.count()).toBe(0);
    });

    it("should update context when re-rendering", () => {
        var child = null;

        class Child extends vrdom.Component {
            static contextTypes = {
                text: PropTypes.string,
                string: PropTypes.string
            };

            render() {
                child = this;
                return <div>{ this.context.text } : { this.context.string }</div>;
            }
        }

        class Parent extends vrdom.Component {
            render() {
                return this.props.children;
            }
        }

        class GrandParent extends vrdom.Component {
            static childContextTypes = {
                text: PropTypes.string,
                string: PropTypes.string
            };

            state = {
                string: "string"
            };

            getChildContext() {
                return {
                    text: "text",
                    string: this.state.string
                };
            }

            render() {
                return this.props.children;
            }
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<GrandParent><Parent><Child /></Parent></GrandParent>, container);

        expect(container.firstChild.textContent).toBe("text : string");
        expect(instance.state.string).toBe("string");
        expect(child.context).toEqual({text: "text", string: "string"});

        instance.setState({string: "new string"});
        expect(container.firstChild.textContent).toBe("text : new string");
        expect(instance.state.string).toBe("new string");
        expect(child.context).toEqual({text: "text", string: "new string"});

        child = null;
        instance = null;
    });

    it("should not warn if shouldComponentUpdate do not return a boolean", () => {
        class Component extends vrdom.Component {
            render() {
                return <div />;
            }

            shouldComponentUpdate() {} // eslint-disable-line no-empty-function
        }

        spyOn(console, "error");
        var container = document.createElement("div");
        vrdom.render(<Component />, container);
        vrdom.render(<Component />, container);

        expect(console.error.calls.count()).toBe(0);
    });

});