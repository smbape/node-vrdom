/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("findDOMNode", () => {
    "use strict";

    var vrdom;

    beforeAll((done) => {
        require.undef("vrdom-dev");

        require(["vrdom-dev"], function() {
            vrdom = arguments[0];

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should return null if passed null", () => {
        expect(vrdom.findDOMNode(null)).toBe(null);
    });

    it("should return DOM node if passed DOM node", () => {
        var domNode = document.createElement("div");
        expect(vrdom.findDOMNode(domNode)).toBe(domNode);
    });

    it("should return DOM node from instance", () => {
        var container = document.createElement("div");
        class Component extends vrdom.Component {
            render() {
                return <div />;
            }
        }

        var instance = vrdom.render(<Component />, container);
        var domNode = vrdom.findDOMNode(instance);
        expect(domNode).toBe(container.firstChild);
    });

    it("should return DOM node even if nested", () => {
        var container = document.createElement("div");

        class Child extends vrdom.Component {
            render() {
                return <div />;
            }
        }

        class Parent extends vrdom.Component {
            render() {
                return <Child />;
            }
        }

        class GrandParent extends vrdom.Component {
            render() {
                return <Parent />;
            }
        }

        var instance = vrdom.render(<GrandParent />, container);
        var domNode = vrdom.findDOMNode(instance);
        expect(domNode).toBe(container.firstChild);
    });

    it("should return null on unmounted components during render process", () => {
        class Component extends vrdom.Component {
            componentWillMount() {
                expect(vrdom.findDOMNode(this)).toBe(null);
            }

            render() {
                return <div/>;
            }
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<Component />, container);
        var domNode = vrdom.findDOMNode(instance);
        expect(domNode).toBe(container.firstChild);
    });

    it("should warn if used inside render", () => {
        spyOn(console, "error");

        class Component extends vrdom.Component {
            constructor(props) {
                super(props);
                this.state = {findDOMNode: false};
            }

            render() {
                if (this.state.findDOMNode) {
                    expect(vrdom.findDOMNode(this).tagName).toBe("DIV");
                }
                return <div/>;
            }

            componentDidMount() {
                this.setState({findDOMNode: true});
            }
        }

        var container = document.createElement("div");
        vrdom.render(<Component />, container);
        expect(console.error.calls.count()).toBe(1);
        expect(console.error.calls.argsFor(0)[0]).toContain(
            "`Component.render()` is calling `vrdom.findDOMNode()` on itself. DOM node may not be setted yet or may change after render."
        );
    });

    it("should throw on invalid argument", () => {
        [true, false, 0, [], Function.prototype, {string: "string"}].forEach((obj) => {
            expect(() => vrdom.findDOMNode(obj)).toThrowError(
                "vrdom.findDOMNode(...): Invalid argument. Only DOM node or composite components are accepted." +
                ("object" === typeof obj && !Array.isArray(obj) ? " (keys: " + Object.keys(obj) + ")" : "")
            );
        });
    });

    it("should throw when called outside a rendering process", () => {
        class Component extends vrdom.Component {
            render() {
                return <div />;
            }
        }

        var element = <Component />;
        var instance = new Component(element.props);
        expect(() => vrdom.findDOMNode(instance)).toThrowError(
            "vrdom.findDOMNode(...): composite component is not mounted."
        );
    });
});