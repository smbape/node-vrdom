deps = [
    {amd: 'lodash', common: 'lodash', brunch: '!_', node: 'lodash'}
    {amd: 'jquery', common: 'jquery', brunch: '!jQuery'}
]

factory = (_, $)->
    series = (tasks, done)->
        length = tasks.length
        i = 0

        iterate = (err)->
            if err or i is length
                done(err) if 'function' is typeof done
                return

            task = tasks[i++]
            task iterate
            return

        iterate()
        return

    eachRepeat = (length, callback, done)->
        i = 0

        iterate = (err)->
            if err or i is length
                done(err) if 'function' is typeof done
                return

            callback i++, iterate
            return

        iterate()
        return

    assertCoherent = (models, children, done)->
        # timeout to let redraw happened
        setTimeout ->
            expectedIds = models.map (user)-> user.id
            actualIds = _.map children, (tr)-> tr.children[0].innerHTML

            msg = 'passed'
            for id, i in actualIds
                if id isnt expectedIds[i]
                    err = 'failed at index ' + i
                    msg = 'failed'
                    break

            done err, msg, actualIds, expectedIds
            return
        , 2
        return

    run = (ArrayComponent, VirtualManager, Renderer, done)->
        vrdom = VirtualManager
        ArrayComponent = ArrayComponent(vrdom)

        container = document.createElement('div')
        document.body.appendChild(container)

        # preload
        Renderer.render(`<ArrayComponent n="5" />`, container)
        Renderer.unmountComponentAtNode(container)

        # run
        n = 80
        instance = Renderer.render(`<ArrayComponent n={ n } add={ 3 * n } change={ 3 * n } remove={ 3 * n } />`, container)

        { users, add, change, remove } = instance.state
        models = users

        addPerformance = 0
        changePerformance = 0
        removePerformance = 0

        children = $('table > tbody.users')[0].children

        series [
            (next)->
                assertCoherent(models, children, next)
                return

            (next)->
                t0 = performance.now()
                eachRepeat add, (i, next)->
                    instance.addChild()
                    assertCoherent(models, children, next)
                    return
                , (err)->
                    t1 = performance.now()
                    addPerformance += (t1 - t0)
                    next(err)
                    return

                return

            (next)->
                t0 = performance.now()
                eachRepeat change, (i, next)->
                    instance.changeChild()
                    assertCoherent(models, children, next)
                    return
                , (err)->
                    t1 = performance.now()
                    changePerformance += (t1 - t0)
                    next(err)
                    return

                return

            (next)->
                t0 = performance.now()
                eachRepeat remove, (i, next)->
                    instance.removeChild()
                    assertCoherent(models, children, next)
                    return
                , (err)->
                    t1 = performance.now()
                    removePerformance += (t1 - t0)
                    next(err)
                    return

                return

        ], (err)->
            result = {
                status: err or 'passed'
                add: [addPerformance, 'ms'].join(' ')
                change: [changePerformance, 'ms'].join(' ')
                remove: [removePerformance, 'ms'].join(' ')
            }

            Renderer.unmountComponentAtNode(container)
            container = null
            done(err, result)
            return

        return

    require ["./ArrayComponent", "vrdom", "preact-compat", "react", "react-dom"], (ArrayComponent, vrdom, preactCompat, React, ReactDOM)->
        results = {
            preact: true,
            vrdom: true,
            react: true
        }
        series [
            (next)->
                if !results.preact
                    next()
                    return

                run ArrayComponent, preactCompat, preactCompat, (err, result)->
                    results.preact = result
                    next()
                    return
                return
            (next)->
                if !results.vrdom
                    next()
                    return

                run ArrayComponent, vrdom, vrdom, (err, result)->
                    results.vrdom = result
                    next()
                    return
                return
            (next)->
                if !results.react
                    next()
                    return

                run ArrayComponent, React, ReactDOM, (err, result)->
                    results.react = result
                    next()
                    return
                return
        ], (err)->
            console.log JSON.stringify(results, null, 4)
            alert JSON.stringify(results, null, 4)
            return
        return

    return
