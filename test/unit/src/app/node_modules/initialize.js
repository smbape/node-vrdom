/** @jsx React.createElement */
/** @babel-plugin-transform-react-display-name { "pragma": "React.createClass", "value": "displayName" } */

var deps = [
    "vrdom",
    "devtools",
    {amd: "preact", common: "!preact"},
    {amd: "preact-compat", common: "!preactCompat"},
    {amd: "react", common: "!React"},
    {amd: "react-dom", common: "!ReactDOM"},
    {
        amd: "auto-reload"
    }
];

function factory(vrdom, devtools, preact, preactCompat, React, ReactDOM) {
    let library = "vrdom";

    switch(library) {
        case "vrdom":
            devtools.register();
            React = vrdom;
            ReactDOM = vrdom;
            break;
        case "preact":
            preact.options.syncComponentUpdates = true;
            preact.options.debounceRendering = function(rerender) {
                rerender();
            };
            break;
    }

    var assign = vrdom.functions.assign,
        inherits = vrdom.functions.inherits,
        eventLoggers = {};

    var delegateEvents = [
        "blur",
        "change",
        "click",
        "drag",
        "drop",
        "focus",
        "input",
        "load",
        "mouseenter",
        "mouseleave",
        "mousemove",
        "mouseout",
        "mouseover",
        "propertychange",
        "reset",
        "scroll",
        "submit",
        "abort",
        "canplay",
        "canplaythrough",
        "durationchange",
        "emptied",
        "encrypted",
        "ended",
        "error",
        "loadeddata",
        "loadedmetadata",
        "loadstart",
        "pause",
        "play",
        "playing",
        "progress",
        "ratechange",
        "seeked",
        "seeking",
        "stalled",
        "suspend",
        "timeupdate",
        "volumechange",
        "waiting"
    ];

    for (var i = 0, len = delegateEvents.length; i < len; i++) {
        var type = delegateEvents[i];
        eventLoggers[type] = console.log.bind(console, type);
    }

    function trigger(type, elem) {
        var nativeEvent;
        nativeEvent = document.createEvent("Event");
        nativeEvent.initEvent(type, true, true);
        elem.dispatchEvent(nativeEvent);
    }

    (function() {
        'use strict';
        let container = document.createElement("div");
        document.body.appendChild(container);

        class Component extends React.Component {
            componentWillMount() {
                this.increase = this.increase.bind(this);
                this.state = { count: 0 };
            }

            increase() {
                this.setState({ count: ++this.state.count });
            }

            render() {
                return <div onClick={ this.increase } className={ this.props.className }>COMPONENT { this.state.count }</div>;
            }
        }

        let ComponentClass = React.createClass({
            getInitialState() {
                return { count: 0 };
            },

            increase() {
                this.setState({ count: ++this.state.count });
            },

            render() {
                switch (this.state.count % 3) {
                    case 0:
                        return <a onClick={ this.increase } className={ this.props.className } href="#">COMPONENT CLASS</a>;
                    case 1:
                        return <button onClick={ this.increase } className={ this.props.className }>COMPONENT CLASS</button>;
                    default:
                        return <div onClick={ this.increase } className={ this.props.className }>COMPONENT CLASS</div>;
                }
            }
        });

        function Stateless(props) {
            return <div className={ props.className }>STATELESS COMPONENT</div>;
        }

        ReactDOM.render(
            <div>
                <div className="dom">DOM</div>
                <Component className="component"  />
                <ComponentClass className="component-class" />
                <Stateless className="stateless" />
            </div>
        , container);
    }());

    (function() {
        return;
        'use strict';
        let container = document.createElement("div");
        document.body.appendChild(container);
        let domNode = ReactDOM.render(<input defaultValue="text" onchange={ console.log.bind(console) } />, container);
    }());

    (function() {
        return;
        "use strict";
        var container = document.createElement("div");
        document.body.appendChild(container);

        function SwapComponent() {
            this.swap = this.swap.bind(this);
            this.state = {
                activated: false
            };
        }

        inherits(SwapComponent, React.Component);

        SwapComponent.prototype.swap = function() {
            return this.setState({
                activated: !this.state.activated
            });
        };

        SwapComponent.prototype.render = function() {
            if (!this.state.activated) {
                return <a onClick={ this.swap }>anchor</a>;
            } else {
                return <b onClick={ this.swap }>bold</b>;
            }
        };

        var instance = ReactDOM.render(<SwapComponent />, container);
        var el = ReactDOM.findDOMNode(instance);
        setTimeout(function() {
            trigger("click", el);
            el = null;
            setTimeout(function() {
                ReactDOM.unmountComponentAtNode(container);
                container = null;
            }, 5000);
        }, 5000);
    })();

    (function() {
        return;
        var container = document.createElement("div");
        document.body.appendChild(container);
        ReactDOM.render(
            <div onMouseEnter={ eventLoggers.mouseenter }
              onMouseLeave={ eventLoggers.mouseleave }
              onClick={ eventLoggers.click }
              onMouseOver={ eventLoggers.mouseover }
              onMouseOut={ eventLoggers.mouseout }>
              <input type="text" />
            </div>
            , container);
    })();

    (function() {
        return;
        var container = document.createElement("div");
        container.className = "container full-container";
        document.body.appendChild(container);

        function onWheel(evt) {
            console.log("wheel", evt);
        }

        var style = {
            color: "rgb(255, 255, 255)",
            background: "rgb(255, 100, 0)",
            backgroundPosition: "10px 10px",
            "background-size": "cover",
            padding: 5,
            lineHeight: 0.5,
            position: "relative",
            top: 100,
            left: "0",
            height: "100%"
        };
        var element = <div style={ style } onWheel={ onWheel }></div>;
        ReactDOM.render(element, container);
    })();

    (function() {
        return;
        var container = document.createElement("div");
        container.className = "container full-container";
        document.body.appendChild(container);

        function onResize(evt) {
            alert("resize");
        }

        var element = <div onResize={ onResize }></div>;
        ReactDOM.render(element, container);
    })();

    // require(["benchmark/collection"], function() {
    //     // debugger;
    // });
}