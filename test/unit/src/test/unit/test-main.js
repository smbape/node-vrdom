/* Generated by umd builder */
(function() {
    'use strict';

    var appConfig = window.appConfig || (window.appConfig = {});

    var config = {
        waitSeconds: 30,
        enforceDefine: false,
        baseUrl: '/base/test/unit/src/public/node_modules',
        paths: {
            jquery: '../bower_components/jquery/dist/jquery',
            preact: '../bower_components/preact/preact',
            proptypes: '../bower_components/proptypes/proptypes',
            bootstrap: '../bower_components/bootstrap/dist/js/bootstrap',
            lodash: '../bower_components/lodash/dist/lodash',
            'material-design-lite': '../bower_components/material-design-lite/material',
            'preact-compat': '../bower_components/preact-compat/preact-compat',
            react: '../bower_components/react/react.min',
            'react-dom': '../bower_components/react/react-dom.min'
        },
        groups: {
            react: ['react', 'react-dom']
        },
        shim: {
            bootstrap: {
                exports: 'jQuery.fn.emulateTransitionEnd',
                deps: ['jquery']
            },
            'material-design-lite': {
                exports: 'componentHandler',
                deps: []
            }
        },
        deps: ['jquery',
            'preact',
            'proptypes',
            'bootstrap',
            'lodash',
            'material-design-lite',
            'preact-compat',
            'react'
        ],
        map: {
            '*': {
                '../bower_components/jquery/dist/jquery': 'jquery',
                '../bower_components/preact/preact': 'preact',
                '../bower_components/proptypes/proptypes': 'proptypes',
                '../bower_components/bootstrap/dist/js/bootstrap': 'bootstrap',
                '../bower_components/lodash/dist/lodash': 'lodash',
                '../bower_components/material-design-lite/material': 'material-design-lite',
                '../bower_components/preact-compat/preact-compat': 'preact-compat',
                '../bower_components/react/react.min': 'react',
                '../bower_components/react/react-dom.min': 'react-dom'
            }
        }
    };



    var groups = config.groups;
    delete config.groups;

    var coverage = window.__env__ && /1|true|on|TRUE|ON/.test(String(window.__env__.COVERAGE));
    if (coverage) {
        config.map['*']['vrdom'] = 'vrdom-cov';
        config.map['*']['vrdom-compat'] = 'vrdom-compat-cov';
        config.map['*']['vrdom-dev'] = 'vrdom-dev-cov';
        config.map['*']['vrdom-compat-dev'] = 'vrdom-compat-dev-cov';
    } else if (/^(?:preact-compat|react)$/.test(String(window.__env__.TEST_LIBRARY))) {
        config.map['*']['vrdom'] = String(window.__env__.TEST_LIBRARY);
        window.isReact = 'react' === config.map['*']['vrdom'];
        window.isLibrary = true;
    }

    requirejs.config(config);

    if (groups) {
        var name, index, deps, group;
        for (name in groups) {
            deps = groups[name];
            group = name + '-group';
            define(group, deps, function(main) {
                return main;
            });

            index = config.deps.indexOf(name);
            if (index !== -1) {
                config.deps[index] = group;
            }
        }
    }

    var deps = config.deps;
    delete config.deps;

    require([
        'umd-core/src/depsLoader',
        'umd-core/src/path-browserify',
        'browser-source-map-support',
        'vrdom',
        'preact',
        'react',
        'react-dom'
    ], function(depsLoader, pathBrowserify, sourceMapSupport, vrdom, preact, React, ReactDOM) {
        sourceMapSupport.install();

        preact.options.syncComponentUpdates = true;
        preact.options.debounceRendering = function(render) {
            rerender();
        };

        if (window.isLibrary) {
            vrdom.reset = Function.prototype;
        }

        if (window.isReact) {
            for (var key in ReactDOM) {
                React[key] = ReactDOM[key];
            }
        }

        window.depsLoader = depsLoader;
        window.pathBrowserify = pathBrowserify;

        var TEST_REGEXP;

        if (window.__env__.TEST_REGEXP) {
            TEST_REGEXP = new RegExp(window.__env__.TEST_REGEXP);
        } else if (window.isLibrary) {
            // 0000 functions
            // 0005 createClass mixins, vrdom allow overriding statics, react do not
            // 0011 undocumented order for setState-cb, component* and arguments in react
            // 0012 undocumented order for setState-cb, component* and arguments in react
            // 0022 hooks do not exist in react
            TEST_REGEXP = /[\/\\]tests[\/\\](?!0000|0005|0011|0012|0022)\d{4}-.*-prod-test\.js$/;
        } else {
            TEST_REGEXP = /[\/\\]tests[\/\\]\d{4}-.*-test\.js$/;
        }

        // add test files
        Object.keys(window.__karma__.files).forEach(function(file) {
            if (TEST_REGEXP.test(file)) {
                deps.push(pathToModule(file));
            }
        });

        // We have to kickoff testing framework,
        // after RequireJS is done with loading all the files.
        require(deps, window.__karma__.start);

        // Normalize a path to RequireJS module name.
        function pathToModule(path) {
            return pathBrowserify.relative(config.baseUrl, path).replace(/\.js$/, '');
        }
    });
}());