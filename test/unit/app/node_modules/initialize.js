/** @jsx React.createElement */
/** @babel-plugin-transform-react-display-name { "pragma": "React.createClass", "value": "displayName" } */

import qs from '%{amd: "qs", common: "qs", brunch: "!Qs"}';
import * as vrdom from "vrdom";
import * as devtools from "vrdom-devtools";
import * as preact from '%{amd: "preact", common: "preact", brunch: "!preact"}';
import * as preactCompat from '%{amd: "preact-compat", common: "preact-compat", brunch: "!preactCompat"}';
import * as React_ from '%{amd: "react", common: "react", brunch: "!React"}';
import * as ReactDOM_ from '{amd: "react-dom", common: "react-dom", brunch: "!ReactDOM"}';

let search = window.location.search;
if (search && search[0] === "?") {
    search = search.slice(1);
}
let query = qs.parse(search);

for (let i = 0, params = ["benchmark", "devtools"], len = params.length; i < len; i++) {
    let param = params[i];
    query[param] = query[param] && /^(?:1|true|on|TRUE|ON)$/.test(query[param]);
}

if (query.benchmark) {
    require([
        "benchmark/collection",
        "vrdom",
        {amd: "preact", common: "preact", brunch: "!preact"},
        {amd: "preact-compat", common: "preact-compat", brunch: "!preactCompat"},
        {amd: "react", common: "react", brunch: "!React"},
        {amd: "react-dom", common: "react-dom", brunch: "!ReactDOM"}
    ], function(collection, vrdom, preact, preactCompat, React, ReactDOM) {
        let libraries = {
            preact: [preactCompat, preactCompat],
            vrdom: [vrdom, vrdom],
            react: [React, ReactDOM]
        };

        collection(libraries, query, (err, results) => {
            let msg = JSON.stringify(results, null, 2);
            console.log(msg);
            alert(msg);
        });
    });
}

let library = query.library;
let React, ReactDOM;

switch(library) {
    case "react":
        React = React_;
        ReactDOM = ReactDOM_;
        break;
    case "preact":
        React = preactCompat;
        ReactDOM = preactCompat;
        preact.options.syncComponentUpdates = true;
        preact.options.debounceRendering = function(rerender) {
            rerender();
        };
        break;
    default:
        if (query.devtools) {
            devtools.register();
        }
        React = vrdom;
        ReactDOM = vrdom;
        break;
}

var assign = vrdom.functions.assign,
    inherits = vrdom.functions.inherits,
    eventLoggers = {};

var delegateEvents = [
    "blur",
    "change",
    "click",
    "drag",
    "drop",
    "focus",
    "input",
    "load",
    "mouseenter",
    "mouseleave",
    "mousemove",
    "mouseout",
    "mouseover",
    "propertychange",
    "reset",
    "scroll",
    "submit",
    "abort",
    "canplay",
    "canplaythrough",
    "durationchange",
    "emptied",
    "encrypted",
    "ended",
    "error",
    "loadeddata",
    "loadedmetadata",
    "loadstart",
    "pause",
    "play",
    "playing",
    "progress",
    "ratechange",
    "seeked",
    "seeking",
    "stalled",
    "suspend",
    "timeupdate",
    "volumechange",
    "waiting"
];

for (var i = 0, len = delegateEvents.length; i < len; i++) {
    var type = delegateEvents[i];
    eventLoggers[type] = console.log.bind(console, type);
}

function trigger(type, elem) {
    var nativeEvent;
    nativeEvent = document.createEvent("Event");
    nativeEvent.initEvent(type, true, true);
    elem.dispatchEvent(nativeEvent);
}

(function() {
    "use strict";

    if (!query.devtools) {
        return;
    }

    let container = document.createElement("div");
    document.body.appendChild(container);

    class Component extends React.Component {
        componentWillMount() {
            this.increase = this.increase.bind(this);
            this.state = { count: 0 };
        }

        increase() {
            this.setState({ count: ++this.state.count });
        }

        render() {
            return <div onClick={ this.increase } className={ this.props.className }>COMPONENT { this.state.count }</div>;
        }
    }

    let ComponentClass = React.createClass({
        getInitialState() {
            return { count: 0 };
        },

        increase() {
            this.setState({ count: ++this.state.count });
        },

        render() {
            switch (this.state.count % 3) {
                case 0:
                    return <a onClick={ this.increase } className={ this.props.className } href="#">COMPONENT CLASS</a>;
                case 1:
                    return <button onClick={ this.increase } className={ this.props.className }>COMPONENT CLASS</button>;
                default:
                    return <div onClick={ this.increase } className={ this.props.className }>COMPONENT CLASS</div>;
            }
        }
    });

    function Stateless(props) {
        return <div className={ props.className }>STATELESS COMPONENT</div>;
    }

    class SubComponent extends React.Component {
        render() {
            return (
                <div ref="rendered">
                    <div>{ this.props.children }</div>
                    <div ref="container" />
                </div>
            );
        }

        componentDidMount() {
            this.updateContent();
        }

        componentDidUpdate() {
            this.updateContent();
        }

        componentWillUnmount() {
            ReactDOM.unmountComponentAtNode(this.refs.container);
        }

        updateContent() {
            ReactDOM.render(this.props.content, this.refs.container);
        }
    }

    class ContentComponent extends React.Component {
        render() {
            return <div ref="rendered">{ this.props.children }</div>;
        }
    }

    class MainComponent extends React.Component {
        render() {
            var content = <ContentComponent ref="rendered">{ this.props.content }</ContentComponent>;

            return (
                <SubComponent ref="rendered" content={ content }>
                    { this.props.children }
                </SubComponent>
            );
        }
    }

    ReactDOM.render(
        <div>
            <div className="dom">DOM</div>
            <Component className="component"  />
            <ComponentClass className="component-class" />
            <Stateless className="stateless" />
            <MainComponent content="CONTENT HERE">HEADER HERE</MainComponent>
        </div>
    , container);
}());
