/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this, no-magic-numbers */

describe("render-iframe-dev", () => {
    "use strict";

    var vrdom;
    var Triggers;
    var IFrame;

    var eventNames = {
        Change: true,
        Click: true,
        Copy: true,
        Cut: true,
        KeyDown: true,
        KeyPress: true,
        KeyUp: true,
        MouseDown: true,
        MouseMove: true,
        MouseOut: true,
        MouseOver: true,
        MouseUp: true,
        Paste: true,
        Scroll: true,
        Wheel: true
    };

    beforeAll((done) => {
        require.undef("vrdom-dev");

        require(["vrdom-dev", "Triggers"], function() {
            vrdom = arguments[0];
            Triggers = arguments[1](vrdom);

            const getExpandoData = vrdom.functions.getExpandoData;
            const hasProp = vrdom.functions.hasProp;
            const assign = vrdom.functions.assign;

            IFrame = vrdom.createClass({
                getInitialState() {
                    return {
                        loading: 2,
                        open: true,
                        onLoad: true
                    };
                },

                getIFrameBehaviour(ownerDocument) {
                    const data = getExpandoData(ownerDocument, {});
                    if (hasProp.call(data, "detectedIFrameBehaviour")) {
                        return data;
                    }

                    const iframe = ownerDocument.createElement("iframe");
                    iframe.style.position = "fixed";
                    iframe.style.top = "-10000px";
                    iframe.style.left = "-10000px";
                    let count = 0;
                    iframe.onload = ()=> {
                        ++count;
                    };

                    ownerDocument.body.appendChild(iframe);

                    data.hasIFrameImmediateLoad = count !== 0;

                    count = 0;
                    iframe.contentDocument.open();
                    iframe.contentDocument.close();
                    data.hasIFrameCloseEvent = count !== 0;

                    ownerDocument.body.removeChild(iframe);

                    data.detectedIFrameBehaviour = true;
                    return data;
                },

                componentWillDOMMount(iframe) {
                    iframe.addEventListener("load", this.onLoad);
                    this.state.behaviour = this.getIFrameBehaviour(iframe.ownerDocument);
                },

                componentDidMount() {
                    this.onLoad();
                },

                componentDidUpdate() {
                    this.onLoad();
                },

                componentWillUpdate(nextProps, nextState) {
                    const prevProps = this.props;
                    const prevSrc = prevProps.src || "about:blank";
                    const prevInnerHTML = prevProps.dangerouslySetInnerHTML && prevProps.dangerouslySetInnerHTML.__html || null;

                    const nextSrc = nextProps.src || "about:blank";
                    const nextInnerHTML = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html || null;

                    if (prevSrc !== nextSrc) {
                        nextState.open = true;
                        nextState.onLoad = true;
                        nextState.loading = 2; // wait load + componentDidUpdate
                    } else {
                        nextState.open = prevInnerHTML !== nextInnerHTML;
                        nextState.onLoad = prevInnerHTML !== nextInnerHTML;
                        nextState.loading = 1; // wait componentDidUpdate
                    }

                    let contentDocument;

                    if (nextState.open) {
                        try {
                            contentDocument = this.refs.iframe.contentDocument;
                        } catch(e) {
                            return;
                        }

                        if (contentDocument) {
                            vrdom.unmountComponentAtNode(contentDocument);
                        }
                    }
                },

                onLoad(evt) {
                    if (this.state.loading === 0) {
                        return;
                    }

                    if (--this.state.loading !== 0) {
                        return;
                    }

                    const children = this.props.children;
                    let innerHTML = this.props.dangerouslySetInnerHTML && this.props.dangerouslySetInnerHTML.__html || null;
                    const src = this.props.src;
                    if (!children && !innerHTML && src && /^javascript:/.test(src)) {
                        try {
                            // eslint-disable-next-line no-eval
                            innerHTML = eval(src.slice("javascript:".length));
                        } catch(e) {
                            return;
                        }
                    }

                    const iframe = this.refs.iframe;
                    const contentWindow = iframe.contentWindow;
                    const contentDocument = iframe.contentDocument;
                    const opened = this.state.open;

                    if (children) {
                        if (opened) {
                            this.state.open = false;
                            contentDocument.open();
                            try {
                                vrdom.render(children, contentDocument);
                            } finally {
                                contentDocument.close();
                            }
                        } else {
                            vrdom.render(children, contentDocument);
                        }
                    } else if (innerHTML && opened) {
                        this.state.open = false;
                        contentDocument.open();
                        contentDocument.write(innerHTML);
                        contentDocument.close();
                    }

                    // load event is not reemitted if already in load event
                    // emit load event for browser (FF) that do not emit load on close
                    if (opened && (evt || !this.state.behaviour.hasIFrameCloseEvent)) {
                        let nativeEvent;
                        if (typeof Event === "function") {
                            nativeEvent = new contentWindow.Event("load", {
                                "bubbles": false,
                                "cancelable": false
                            });
                        } else {
                            nativeEvent = contentDocument.createEvent("Event");
                            nativeEvent.initEvent(name, true, true);
                        }
                        contentWindow.dispatchEvent(nativeEvent);
                        contentDocument.close();
                    }

                    const onLoad = this.props.onLoad;
                    if (onLoad && this.state.onLoad) {
                        this.state.onLoad = false;
                        onLoad.call(this.refs.iframe, evt);
                    }
                },

                componentWillUnmount() {
                    const iframe = this.refs.iframe;
                    if (!iframe) {
                        return;
                    }

                    iframe.removeEventListener("load", this.onLoad);

                    let contentDocument;
                    try {
                        contentDocument = iframe.contentDocument;
                    } catch(e) {
                        return;
                    }

                    if (contentDocument) {
                        vrdom.unmountComponentAtNode(contentDocument);
                    }
                },

                render() {
                    const props = assign({}, this.props);
                    delete props.children;
                    delete props.onLoad;
                    delete props.dangerouslySetInnerHTML;

                    props.ref = "iframe";
                    if (!props.src || /^javascript:/.test(props.src)) {
                        props.src = "about:blank";
                    }
                    return vrdom.createElement("iframe", props);
                }
            });

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    // element
    it("should render iframe children", (done) => {
        var container = document.createElement("div");
        // iframe document can only be altered if mount on document
        document.body.appendChild(container);

        var loaded = 0;
        function onLoad() {
            loaded++;
        }

        var iframe = vrdom.render(<IFrame onLoad={ onLoad }>
            <html>
                <head></head>
                <body className="body" onLoad={ onLoad }>
                    <h3>Children works</h3>
                </body>
            </html>
        </IFrame>, container).refs.iframe;

        // use setTimeout to no rely on load event
        setTimeout(() => {
            expect(loaded).toBe(2);
            expect(iframe.contentDocument.body.className).toBe("body");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>Children works</h3>");

            vrdom.unmountComponentAtNode(container);
            document.body.removeChild(container);
            done();
        }, 100);
    });

    // html
    it("should render iframe innerHTML", (done) => {
        var container = document.createElement("div");
        // iframe document can only be altered if mount on document
        document.body.appendChild(container);

        var loaded = 0;
        function onLoad() {
            loaded++;
        }

        var iframe = vrdom.render(<IFrame onLoad={ onLoad } dangerouslySetInnerHTML={{ __html: `
            <!DOCTYPE html>
            <html>
                <head></head>
                <body class="body">
                    <h3>Inner HTML works</h3>
                </body>
            </html>
        ` }} />, container).refs.iframe;

        // use setTimeout to no rely on load event
        setTimeout(() => {
            expect(loaded).toBe(1);
            expect(iframe.contentDocument.body.className).toBe("body");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>Inner HTML works</h3>");

            vrdom.unmountComponentAtNode(container);
            document.body.removeChild(container);
            done();
        }, 100);
    });

    it("should update iframe children", (done) => {
        var container = document.createElement("div");
        // iframe document can only be altered if mount on document
        document.body.appendChild(container);

        var loaded = 0;
        function onLoad() {
            loaded++;
        }

        var iframe = vrdom.render(<IFrame onLoad={ onLoad }>
            <html>
                <head></head>
                <body className="body" onLoad={ onLoad }>
                    <h3>It works</h3>
                </body>
            </html>
        </IFrame>, container).refs.iframe;

        // use setTimeout to no rely on load event
        setTimeout(() => {
            expect(loaded).toBe(2);
            expect(iframe.contentDocument.body.className).toBe("body");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>It works</h3>");

            var iframe2 = vrdom.render(<IFrame onLoad={ onLoad }>
                <html>
                    <head></head>
                    <body className="body2" onLoad={ onLoad }>
                        <h3>It works 2</h3>
                    </body>
                </html>
            </IFrame>, container).refs.iframe;

            expect(iframe2).toBe(iframe);
            expect(loaded).toBe(2);
            expect(iframe.contentDocument.body.className).toBe("body2");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>It works 2</h3>");

            iframe2 = vrdom.render(<IFrame onLoad={ onLoad } dangerouslySetInnerHTML={{ __html: `
                <!DOCTYPE html>
                <html>
                    <head></head>
                    <body class="body">
                        <h3>It works</h3>
                    </body>
                </html>
            ` }} />, container).refs.iframe;
            expect(iframe2).toBe(iframe);
            expect(loaded).toBe(3); // change from children to innerHTML is considered as source change
            expect(iframe.contentDocument.body.className).toBe("body");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>It works</h3>");

            iframe2 = vrdom.render(<IFrame onLoad={ onLoad }>
                <html>
                    <head></head>
                    <body className="body2" onLoad={ onLoad }>
                        <h3>It works 2</h3>
                    </body>
                </html>
            </IFrame>, container).refs.iframe;

            expect(iframe2).toBe(iframe);
            expect(loaded).toBe(5); // change from children to innerHTML is considered as source change + body onLoad
            expect(iframe.contentDocument.body.className).toBe("body2");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>It works 2</h3>");

            vrdom.unmountComponentAtNode(container);
            document.body.removeChild(container);
            done();
        }, 100);
    });

    it("should ref element inside iframe", (done) => {
        var container = document.createElement("div");
        // iframe document can only be altered if mount on document
        document.body.appendChild(container);

        var loaded = 0;
        function onLoad() {
            loaded++;
        }

        class IFrameComponent extends vrdom.Component {
            render() {
                return <IFrame onLoad={ onLoad }>
                    <html>
                        <head></head>
                        <body ref="body" className="body" onLoad={ onLoad }>
                            <h3>It works</h3>
                        </body>
                    </html>
                </IFrame>;
            }
        }

        var component = vrdom.render(<IFrameComponent />, container);
        var iframe = vrdom.findDOMNode(component);

        setTimeout(() => {
            expect(loaded).toBe(2);
            expect(iframe.contentDocument.body.className).toBe("body");
            expect(iframe.contentDocument.body.innerHTML.trim()).toBe("<h3>It works</h3>");
            expect(iframe.contentDocument.body).toBe(component.refs.body);

            vrdom.unmountComponentAtNode(container);

            document.body.removeChild(container);
            done();
        }, 100);
    });

    it("should handle event on DOM element", (done) => {
        var container = document.createElement("div");
        // iframe document can only be altered if mount on document
        document.body.appendChild(container);

        var count;
        var keys = Object.keys(eventNames);
        var index = 0;
        var length = keys.length;
        iterate();

        function increase(type, evt) {
            expect(evt.type).toBe(type);
            expect(evt.bubbles).toBe(true);
            expect(evt.which).toBe(type === "click" ? 1 : /^key/.test(type) ? "E".charCodeAt(0) : undefined);
            expect(evt.target).toBe(container.firstChild.contentDocument.body.firstChild);
            expect(evt.currentTarget).toBe(container.firstChild.contentDocument.body.firstChild);
            count++;
        }

        function iterate() {
            if (index === length) {
                document.body.removeChild(container);
                done();
                return;
            }

            count = 0;
            var name = keys[index++];
            var props = {};
            props["on" + name] = increase.bind(null, name.toLowerCase());
            var iframe = vrdom.render(<IFrame>
                <html>
                    <head></head>
                    <body>
                        <div { ...props } />
                    </body>
                </html>
            </IFrame>, container).refs.iframe;

            setTimeout(() => {
                Triggers[name.toLowerCase()](iframe.contentDocument.body.firstChild);
                expect(count).toBe(1);

                vrdom.unmountComponentAtNode(container);
                iterate();
            }, 100);
        }
    });

});