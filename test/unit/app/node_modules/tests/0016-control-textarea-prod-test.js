/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("control-textarea-prod", () => {
    "use strict";

    var vrdom;
    var Triggers;
    var emptyFn = Function.prototype;

    beforeAll((done) => {
        require.undef("vrdom");

        require(["vrdom", "Triggers"], function() {
            vrdom = arguments[0];
            Triggers = arguments[1](vrdom);

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should handle value", () => {
        var container = document.createElement("div");
        var domNode;

        ["string", 0, 1, true, false, { toString: () => "string" }].forEach(function(value) {
            domNode = vrdom.render(<textarea value={ value } readOnly={ true } />, container);
            expect(domNode.value).toBe(String(value));
            vrdom.unmountComponentAtNode(container);
        });
    });

    it("should handle defaultValue", () => {
        var container = document.createElement("div");
        var domNode;

        ["string", 0, 1, true, false, { toString: () => "string" }].forEach(function(defaultValue) {
            domNode = vrdom.render(<textarea defaultValue={ defaultValue } />, container);
            expect(domNode.value).toBe(String(defaultValue));
            expect(domNode.defaultValue).toBe(String(defaultValue));

            // updating default value should keep previous value
            domNode = vrdom.render(<textarea defaultValue={ defaultValue + "new" } />, container);
            expect(domNode.value).toBe(String(defaultValue));
            expect(domNode.defaultValue).toBe(String(defaultValue + "new"));

            domNode = vrdom.render(<textarea value={ defaultValue + "new" } onChange={ emptyFn } />, container);
            expect(domNode.value).toBe(String(defaultValue + "new"));

            domNode = vrdom.render(<textarea defaultValue={ defaultValue + "finally" } />, container);
            expect(domNode.value).toBe(String(defaultValue + "new"));
            expect(domNode.defaultValue).toBe(String(defaultValue + "finally"));

            vrdom.unmountComponentAtNode(container);
        });
    });

    it("should not change previously setted value when setting defaultValue", () => {
        var container = document.createElement("div");
        var domNode;

        domNode = vrdom.render(<textarea />, container);
        domNode.value = "value";
        vrdom.render(<textarea defaultValue="new value" />, container);
        expect(domNode.value).toBe("value");
        expect(domNode.defaultValue).toBe("new value");
        vrdom.unmountComponentAtNode(container);

        domNode = vrdom.render(<textarea value="value" readOnly={ true } />, container);
        expect(domNode.value).toBe("value");
        vrdom.render(<textarea defaultValue="new value" />, container);
        expect(domNode.value).toBe("value");
        expect(domNode.defaultValue).toBe("new value");
        vrdom.unmountComponentAtNode(container);

    });

    it("should control textarea with value as read only textarea", () => {
        var container = document.createElement("div");
        var domNode = vrdom.render(<textarea value="controlled" />, container);
        expect(domNode.value).toBe("controlled");

        domNode.value = "uncontrolled";
        Triggers.change(domNode);
        expect(domNode.value).toBe("controlled");

        domNode.value = "uncontrolled";
        Triggers.change(domNode);
        expect(domNode.value).toBe("controlled");
    });

    it("should control textarea", () => {
        class Component extends vrdom.Component {
            constructor(props, context) {
                super(props, context);
                this.handleChange = this.handleChange.bind(this);
                this.state = { value: "initial" };
            }

            handleChange(evt) {
                this.setState({ value: evt.target.value });
            }

            render() {
                return <textarea value={ this.state.value } onChange={ this.handleChange } />;
            }
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<Component />, container);
        var domNode = vrdom.findDOMNode(instance);

        expect(domNode.value).toBe("initial");

        domNode.value = "changed";
        Triggers.change(domNode);
        expect(domNode.value).toBe("changed");

        domNode.value = "another try";
        Triggers.change(domNode);
        expect(domNode.value).toBe("another try");

        domNode.value = "finally";
        Triggers.change(domNode);
        expect(domNode.value).toBe("finally");
    });

    it("should treat children as defaultValue", () => {
        spyOn(console, "error");

        var container = document.createElement("div");
        var domNode;

        ["string", 0, 1, true, false, ["string"], { toString: () => "string" }].forEach(function(defaultValue) {
            domNode = vrdom.render(<textarea>{ defaultValue }</textarea>, container);
            expect(domNode.value).toBe(String(defaultValue));
            expect(domNode.defaultValue).toBe(String(defaultValue));

            // updating default value should keep previous value
            domNode = vrdom.render(<textarea>{ defaultValue + "new" }</textarea>, container);
            expect(domNode.value).toBe(String(defaultValue));
            expect(domNode.defaultValue).toBe(String(defaultValue + "new"));

            domNode = vrdom.render(<textarea value={ defaultValue + "new" } onChange={ emptyFn } />, container);
            expect(domNode.value).toBe(String(defaultValue + "new"));

            domNode = vrdom.render(<textarea>{ defaultValue + "finally" }</textarea>, container);
            expect(domNode.value).toBe(String(defaultValue + "new"));
            expect(domNode.defaultValue).toBe(String(defaultValue + "finally"));

            vrdom.unmountComponentAtNode(container);
        });

        expect(console.error.calls.count()).toBe(0);
    });

    it("should not warn if value is null", () => {
        spyOn(console, "error");

        var container = document.createElement("div");
        vrdom.render(<textarea value={ null } onChange={ Function.prototype } />, container);

        expect(console.error.calls.count()).toBe(0);
    });

    it("should not warn if value and defaultValue", () => {
        spyOn(console, "error");

        var container = document.createElement("div");
        vrdom.render(<textarea value="value" defaultValue="defaultValue" onChange={ Function.prototype } />, container);

        expect(console.error.calls.count()).toBe(0);
    });

    it("should not throw if more than one child", () => {
        var container = document.createElement("div");
        expect(() => {
            vrdom.render(
                <textarea>
                    <p>text</p>
                    <p>text</p>
                </textarea>
            , container);
        }).not.toThrow();
    });

});