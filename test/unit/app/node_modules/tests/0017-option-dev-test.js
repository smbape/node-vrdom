/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("option-dev", () => {
    "use strict";

    var vrdom;

    beforeAll((done) => {
        window.require.undef("vrdom-dev");

        require(["vrdom-dev"], function() {
            vrdom = arguments[0];

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should flatten children to string", () => {
        var children = ["string", "", " ", 0, 1, 1.2]; // eslint-disable-line no-magic-numbers
        var element = vrdom.createElement.apply(vrdom, ["option", null].concat(children));
        var container = document.createElement("div");
        vrdom.render(element, container);

        expect(container.firstChild.innerHTML).toBe(children.join(""));

        vrdom.unmountComponentAtNode(container);
    });

    it("should ignore invalid children when flattening", () => {
        spyOn(console, "error");

        var children = ["string", <div />, true, false, "", [], " ", 0, 1, null, 1.2, undefined]; // eslint-disable-line no-magic-numbers
        var validChildren = ["string", "", " ", 0, 1, 1.2]; // eslint-disable-line no-magic-numbers
        var element = vrdom.createElement.apply(vrdom, ["option", null].concat(children));
        var container = document.createElement("div");
        vrdom.render(element, container);
        expect(container.firstChild.innerHTML).toBe(validChildren.join(""));
        vrdom.unmountComponentAtNode(container);

        expect(console.error.calls.count()).toBe(1);
        expect(console.error.calls.argsFor(0)[0]).toContain("Only strings and numbers are supported as <option> children.");
    });

    it("should allow dangerouslySetInnerHTML", () => {
        var container = document.createElement("div");
        vrdom.render(<option dangerouslySetInnerHTML={{ __html: "string" }} />, container);
        expect(container.firstChild.innerHTML).toBe("string");
        vrdom.unmountComponentAtNode(container);
    });

    it("should not control if not in select>optgroup", () => {
        var container = document.createElement("div");
        vrdom.render(
            <div value="void">
                <optgroup>
                    <option value="value">value</option>
                    <option value="void">void</option>
                </optgroup>
            </div>
        , container);

        expect(container.firstChild.firstChild.childNodes[1].selected).toBe(false);
    });

    it("should warn if selected is defined", () => {
        spyOn(console, "error");

        var container = document.createElement("div");
        vrdom.render(<select><option value="value" selected={ true } /></select>, container);

        expect(console.error.calls.count()).toBe(1);
        expect(console.error.calls.argsFor(0)[0]).toBe(
            "Warning: Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
        );
    });

});