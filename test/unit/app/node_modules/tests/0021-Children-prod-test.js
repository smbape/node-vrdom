/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("Children-prod", () => {
    "use strict";

    var vrdom;
    var Children;
    var Component;

    beforeAll((done) => {
        require.undef("vrdom");

        require(["vrdom"], function() {
            vrdom = arguments[0];
            Children = vrdom.Children;

            Component = class extends vrdom.Component {
                render() {
                    return <b/>;
                }
            };

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should map Array", () => {
        var entries = [["a", "a"], ["b", "b"]];

        var mapped = Children.map(entries, function(child, key) {
            return [child, key];
        });

        expect(mapped).toEqual([["a", 0], ["a", 1], ["b", 2], ["b", 3]]);

        var context = {};
        mapped = Children.map(entries, function(child, key) {
            expect(this).toBe(context); // eslint-disable-line no-invalid-this
            return [child, key];
        }, context);

        expect(mapped).toEqual([["a", 0], ["a", 1], ["b", 2], ["b", 3]]);
    });

    it("should map Map", () => {
        var entries = [["a", "a"], ["b", "b"]];

        var mapped = Children.map(new Map(entries), function(child, key) {
            return [child, key];
        });

        expect(mapped).toEqual(entries);
    });

    it("should map Set", () => {
        var entries = [["a", "a"], ["b", "b"]];

        var mapped = Children.map(new Set(entries), function(child, key) {
            return [child, key];
        });

        expect(mapped).toEqual([["a", 0], ["a", 1], ["b", 2], ["b", 3]]);
    });

    it("should map string/number/boolean/null/undefined", () => {
        function pushFirst(first) {
            return first;
        }

        expect(Children.map("string", pushFirst)).toEqual(["string"]);
        expect(Children.map(0, pushFirst)).toEqual([0]);
        expect(Children.map(true, pushFirst)).toEqual([true]);
        expect(Children.map([true, false, null, undefined], pushFirst)).toEqual([true, false, null, undefined]);
        expect(Children.map(null)).toBe(null);
        expect(Children.map(undefined)).toBe(undefined);
    });

    it("should forEach Array", () => {
        var entries = [["a", "a"], ["b", "b"]];
        var array = [];

        Children.forEach(entries, function(child, key) {
            array.push([child, key]);
        });

        expect(array).toEqual([["a", 0], ["a", 1], ["b", 2], ["b", 3]]);

        array.length = 0;
        var context = {};
        Children.forEach(entries, function(child, key) {
            expect(this).toBe(context); // eslint-disable-line no-invalid-this
            array.push([child, key]);
        }, context);

        expect(array).toEqual([["a", 0], ["a", 1], ["b", 2], ["b", 3]]);
    });

    it("should forEach Map", () => {
        var entries = [["a", "a"], ["b", "b"]];
        var array = [];

        Children.forEach(new Map(entries), function(child, key) {
            array.push([child, key]);
        });

        expect(array).toEqual(entries);
    });

    it("should forEach Set", () => {
        var entries = [["a", "a"], ["b", "b"]];
        var array = [];

        Children.forEach(new Set(entries), function(child, key) {
            array.push([child, key]);
        });

        expect(array).toEqual([["a", 0], ["a", 1], ["b", 2], ["b", 3]]);
    });

    it("should forEach string/number/boolean/null/undefined", () => {
        var res;

        function pushFirst(first) {
            return res.push(first);
        }

        res = [];
        Children.forEach("string", pushFirst);
        expect(res).toEqual(["string"]);

        res = [];
        Children.forEach(0, pushFirst);
        expect(res).toEqual([0]);

        res = [];
        Children.forEach([true, false], pushFirst);
        expect(res).toEqual([true, false]);

        res = [];
        Children.forEach(null, pushFirst);
        expect(res).toEqual([]);

        res = [];
        Children.forEach(undefined, pushFirst);
        expect(res).toEqual([]);
    });

    it("should count Array", () => {
        var entries = [["a", "a"], ["b", "b"]];
        expect(Children.count(entries)).toBe(4);
    });

    it("should count Map", () => {
        var entries = [["a", "a"], ["b", "b"]];
        expect(Children.count(new Map(entries))).toBe(2);
    });

    it("should count null/undefined", () => {
        var entries = [["a", null], ["b", undefined]];
        expect(Children.count(null)).toBe(0);
        expect(Children.count(undefined)).toBe(0);
        expect(Children.count(entries)).toBe(4);
        expect(Children.count(new Map(entries))).toBe(2);
    });

    it("should toArray Array", () => {
        var entries = [["a", "a"], ["b", "b"]];
        expect(Children.toArray(entries)).toEqual(["a", "a", "b", "b"]);
    });

    it("should toArray Map", () => {
        var entries = [["a", "a"], ["b", "b"]];
        expect(Children.toArray(new Map(entries))).toEqual(["a", "b"]);
    });

    it("should only as isValidElement", () => {
        spyOn(console, "error");

        // createlement
        var element = <div />;
        expect(Children.only(element)).toBe(element);

        // undefined, null
        expect(function() {
            Children.only(null);
        }).not.toThrow();
        expect(function() {
            Children.only(undefined);
        }).not.toThrow();

        // boolean
        expect(function() {
            Children.only(true);
        }).not.toThrow();
        expect(function() {
            Children.only(false);
        }).not.toThrow();

        // number
        expect(function() {
            Children.only(0);
        }).not.toThrow();
        expect(function() {
            Children.only(1);
        }).not.toThrow();

        // string
        expect(function() {
            Children.only("");
        }).not.toThrow();
        expect(function() {
            Children.only("string");
        }).not.toThrow();

        // function
        expect(function() {
            Children.only(Function.prototype);
        }).not.toThrow();
        expect(function() {
            Children.only(Component);
        }).not.toThrow();

        // Array
        expect(function() {
            Children.only([]);
        }).not.toThrow();
        expect(function() {
            Children.only([<Component />]);
        }).not.toThrow();

        // object outside createElement
        expect(function() {
            Children.only({});
        }).not.toThrow();
        expect(function() {
            Children.only(Object.create(null));
        }).not.toThrow();
        expect(function() {
            Children.only({
                type: "div",
                props: {}
            });
        }).not.toThrow();
    });

});