/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("unmountComponentAtNode-dev", () => {
    "use strict";

    var vrdom;

    beforeAll((done) => {
        window.require.undef("vrdom-dev");
        window.require.undef("vrdom-dev");

        require(["vrdom-dev"], function() {
            vrdom = arguments[0];

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should unmount DOM node", () => {
        var container = document.createElement("div");

        vrdom.render(<div><span><e>text</e><p>another text</p></span><br/></div>, container);
        expect(container.childNodes.length).toBe(1);
        vrdom.unmountComponentAtNode(container);
        expect(container.childNodes.length).toBe(0);
    });

    it("should unmount isolated DOM node", () => {
        var container0 = document.createElement("div");
        var container1 = document.createElement("div");

        vrdom.render(<div />, container0);
        vrdom.render(<div />, container1);
        expect(container0.childNodes.length).toBe(1);
        expect(container1.childNodes.length).toBe(1);

        vrdom.unmountComponentAtNode(container0);
        expect(container0.childNodes.length).toBe(0);
        expect(container1.childNodes.length).toBe(1);

        vrdom.unmountComponentAtNode(container1);
        expect(container0.childNodes.length).toBe(0);
        expect(container1.childNodes.length).toBe(0);
    });

    it("should unmount Composite Component", () => {
        class Component extends vrdom.Component {
            render() {
                return <div />;
            }
        }

        var container = document.createElement("div");
        vrdom.render(<Component />, container);
        expect(container.childNodes.length).toBe(1);
        vrdom.unmountComponentAtNode(container);
        expect(container.childNodes.length).toBe(0);
    });

    it("should call and not be unmounted in componentWillUnmount", () => {
        var container = document.createElement("div");
        var logs = [];

        class Child extends vrdom.Component {
            componentWillUnmount() {
                logs.push("Child componentWillUnmount");
                var domNode = vrdom.findDOMNode(this);
                expect(domNode.parentNode.parentNode.parentNode).toBe(container);
                expect(domNode.nodeName).toBe("DIV");
            }

            render() {
                return <div />;
            }
        }

        class Parent extends vrdom.Component {
            componentWillUnmount() {
                logs.push("Parent componentWillUnmount");
                var domNode = vrdom.findDOMNode(this);
                expect(domNode.parentNode.parentNode).toBe(container);
                expect(domNode.nodeName).toBe("DIV");
            }

            render() {
                return <div><Child /></div>;
            }
        }

        class GrandParent extends vrdom.Component {
            componentWillUnmount() {
                logs.push("GrandParent componentWillUnmount");
                var domNode = vrdom.findDOMNode(this);
                expect(domNode.parentNode).toBe(container);
                expect(domNode.nodeName).toBe("DIV");
            }

            render() {
                return <div><Parent /></div>;
            }
        }

        vrdom.render(<GrandParent />, container);
        expect(container.childNodes.length).toBe(1);
        vrdom.unmountComponentAtNode(container);
        expect(container.childNodes.length).toBe(0);
        expect(logs).toEqual([
            "GrandParent componentWillUnmount",
            "Parent componentWillUnmount",
            "Child componentWillUnmount",
        ]);
    });

    it("should not throw when unmounting already unmounting", () => {
        var logs = [];

        class Child extends vrdom.Component {
            componentWillUnmount() {
                logs.push("Child componentWillUnmount");
                expect(vrdom.findDOMNode(this).nodeName).toBe("DIV");
                this.props.parent.setState({ child: true });
            }

            render() {
                return <div />;
            }
        }

        class Parent extends vrdom.Component {
            constructor(props, context) {
                super(props, context);
                this.state = { child: true };
            }

            componentWillUnmount() {
                logs.push("Parent componentWillUnmount");
                expect(vrdom.findDOMNode(this).nodeName).toBe("DIV");
            }

            render() {
                return this.state.child ? <Child parent={ this } /> : null;
            }
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<Parent />, container);
        expect(() => {
            instance.setState({child: false});
            vrdom.unmountComponentAtNode(container);
        }).not.toThrow();

        expect(logs).toEqual([
            "Child componentWillUnmount",
            "Parent componentWillUnmount",
            "Child componentWillUnmount"
        ]);
    });

    it("should throw if remounting unmounting", () => {
        var container = document.createElement("div");

        class Component extends vrdom.Component {
            render() {
                return <div />;
            }

            componentWillUnmount() {
                vrdom.render(<div />, container);
            }
        }

        vrdom.render(<Component />, container);
        expect(() => vrdom.unmountComponentAtNode(container)).toThrowError(
            "Trying to mount on a container in the middle of an unmounting process"
        );
    });

    it("should throw on invalid container", () => {
        [true, false, 0, 1, Function.prototype, {}, []].forEach((container) => {
            expect(() => vrdom.unmountComponentAtNode(container)).toThrowError(
                "vrdom.unmountComponentAtNode(): container is not a DOM node."
            );
        });
    });
});