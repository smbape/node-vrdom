/* eslint-env node, jasmine */
/* eslint-disable no-undefined, class-methods-use-this */

describe("StatelessComponent-dev", () => {
    "use strict";

    var vrdom;

    beforeAll((done) => {
        require.undef("vrdom-dev");

        require(["vrdom-dev"], function() {
            vrdom = arguments[0];

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should render", () => {
        function StatelessComponent() {
            return <div />;
        }

        var container = document.createElement("div");
        var instance = vrdom.render(<StatelessComponent />, container);

        expect(instance).toBe(null);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("DIV");
    });

    it("should use default props", () => {
        function StatelessComponent(props) {
            return <div>{ props.prop }</div>;
        }

        StatelessComponent.defaultProps = { prop: "prop" };

        var container = document.createElement("div");
        vrdom.render(<StatelessComponent />, container);
        expect(container.firstChild.innerHTML).toBe("prop");
    });

    it("should override default props", () => {
        function StatelessComponent(props) {
            return <div>{ props.prop }</div>;
        }

        StatelessComponent.defaultProps = { prop: "prop" };

        var container = document.createElement("div");
        vrdom.render(<StatelessComponent prop="another prop" />, container);
        expect(container.firstChild.innerHTML).toBe("another prop");
    });

    it("should update", () => {
        function StatelessComponent(props) {
            switch (props.type) {
                case "a":
                    return <a />;
                case "b":
                    return <b />;
                case "p":
                    return vrdom.DOM.p();
                default:
                    return vrdom.DOM.div();
            }
        }

        var container = document.createElement("div");

        vrdom.render(<StatelessComponent />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("DIV");

        vrdom.render(<StatelessComponent type="p" />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("P");

        vrdom.render(<StatelessComponent type="a" />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("A");

        vrdom.render(<StatelessComponent type="b" />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("B");

        vrdom.render(<StatelessComponent />, container);
        expect(container.children.length).toBe(1);
        expect(container.firstChild.tagName).toBe("DIV");

    });

    it("should unmountComponentAtNode", () => {
        function StatelessComponent() {
            return <div />;
        }

        var container = document.createElement("div");
        vrdom.render(<StatelessComponent />, container);
        vrdom.unmountComponentAtNode(container);
        expect(container.childNodes.length).toBe(0);
        expect(container.innerHTML).toBe("");
    });

    it("should handle null", () => {
        function StatelessComponent() {
            return null;
        }

        var container = document.createElement("div");
        vrdom.render(<StatelessComponent />, container);
        expect(container.textContent).toBe("");
        vrdom.unmountComponentAtNode(container);
        expect(container.childNodes.length).toBe(0);
        expect(container.innerHTML).toBe("");
    });

    it("should handle false", () => {
        function StatelessComponent() {
            return false;
        }

        var container = document.createElement("div");
        vrdom.render(<StatelessComponent />, container);
        expect(container.textContent).toBe("");
        vrdom.unmountComponentAtNode(container);
        expect(container.childNodes.length).toBe(0);
        expect(container.innerHTML).toBe("");
    });

    it("should warn when receive ref", () => {
        function StatelessComponent() {
            return <div />;
        }

        spyOn(console, "error");

        var container = document.createElement("div");
        vrdom.render(<StatelessComponent ref={ Function.prototype } />, container);
        expect(console.error.calls.count()).toBe(1);
        expect(console.error.calls.argsFor(0)[0]).toBe(
            "StatelessComponent is a stateless component and cannot have refs."
        );
    });

    it("should warn when receive ref with owner info", () => {
        function StatelessComponent() {
            return <div />;
        }

        class Component extends vrdom.Component {
            render() {
                return <StatelessComponent ref={ Function.prototype } />;
            }
        }

        spyOn(console, "error");

        var container = document.createElement("div");
        vrdom.render(<Component />, container);
        expect(console.error.calls.count()).toBe(1);
        expect(console.error.calls.argsFor(0)[0]).toBe(
            "StatelessComponent is a stateless component and cannot have refs."
            + " It was created in `Component.render()`."
        );
    });

    it("should throw on invalid element", () => {
        function StatelessComponent() {
            return {};
        }

        var container = document.createElement("div");
        expect(() => {
            vrdom.render(<StatelessComponent />, container);
        }).toThrowError(
            "StatelessComponent(...): Invalid element returned. Valid elements are null and objects created by vrdom.createElement."
        );
    });

    it("should throw when returning an element with ref string", () => {
        function StatelessComponent() {
            return <div ref="ref" />;
        }

        var container = document.createElement("div");
        expect(() => {
            vrdom.render(<StatelessComponent />, container);
        }).toThrowError(
            "A component element returned by a Stateless function cannot have a string ref."
        );
    });

});