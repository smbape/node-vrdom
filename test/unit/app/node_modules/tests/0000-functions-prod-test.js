/* eslint-env node, jasmine */

describe("functions-prod", () => {
    "use strict";

    var vrdom;
    var functions;

    beforeAll((done) => {
        require.undef("vrdom");

        require(["vrdom"], function() {
            vrdom = arguments[0];
            functions = vrdom.functions;

            done();
        });
    });

    afterAll(() => {
        vrdom.reset();
    });

    it("should inherits", () => {
        var inherits = functions.inherits;

        function LivingBeing(name) {
            if (name) {
                this.name = name;
            }
        }

        LivingBeing.staticMethod = function() {
            return "static";
        };

        LivingBeing.prototype.name = "LivingBeing";

        LivingBeing.prototype.caracteristics = function() {
            return "live";
        };

        LivingBeing.prototype.environment = function() {
            return "earth";
        };

        function Mammal() {
            return Mammal.__super__.constructor.apply(this, arguments);
        }

        inherits(Mammal, LivingBeing);

        Mammal.prototype.name = "Mammal";

        Mammal.prototype.caracteristics = function() {
            return Mammal.__super__.caracteristics.call(this) + " breastfeed";
        };

        Mammal.prototype.laysEggs = function() {
            return false;
        };

        function Platypus() {
            return Platypus.__super__.constructor.apply(this, arguments);
        }

        inherits(Platypus, Mammal);

        Platypus.prototype.name = "Platypus";

        Platypus.prototype.environment = function() {
            return Platypus.__super__.environment.call(this) + " ground water";
        };

        Platypus.prototype.laysEggs = function() {
            return true;
        };

        var instance = new Platypus("mob");
        expect(instance.constructor).toBe(Platypus);
        expect(instance.name).toBe("mob");
        expect(instance).toEqual(jasmine.any(Platypus));
        expect(instance).toEqual(jasmine.any(Mammal));
        expect(instance).toEqual(jasmine.any(LivingBeing));
        expect(instance.laysEggs()).toBe(true);
        expect(instance.environment()).toBe("earth ground water");
        expect(instance.caracteristics()).toBe("live breastfeed");
        expect(typeof Platypus.staticMethod).toBe("function");
        expect(Platypus.staticMethod()).toBe("static");
        expect(typeof instance.staticMethod).toBe("undefined");
    });

});