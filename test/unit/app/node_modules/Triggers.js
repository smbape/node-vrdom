var deps = [];

function factory() {

    var eventNames = {
        Abort: true,
        AnimationEnd: true,
        AnimationIteration: true,
        AnimationStart: true,
        Blur: true,
        CanPlay: true,
        CanPlayThrough: true,
        Change: true,
        Click: true,
        CompositionEnd: true,
        CompositionStart: true,
        CompositionUpdate: true,
        ContextMenu: true,
        Copy: true,
        Cut: true,
        DoubleClick: {
            eventType: "dbclick"
        },
        Drag: true,
        DragEnd: true,
        DragEnter: true,
        DragExit: true,
        DragLeave: true,
        DragOver: true,
        DragStart: true,
        Drop: true,
        DurationChange: true,
        Emptied: true,
        Encrypted: true,
        Ended: true,
        Error: true,
        Focus: true,
        Input: true,
        Invalid: true,
        KeyDown: true,
        KeyPress: true,
        KeyUp: true,
        Load: true,
        LoadedData: true,
        LoadedMetadata: true,
        LoadStart: true,
        MouseDown: true,
        MouseMove: true,
        MouseOut: true,
        MouseOver: true,
        MouseUp: true,
        Paste: true,
        Pause: true,
        Play: true,
        Playing: true,
        Progress: true,
        RateChange: true,
        Reset: true,
        Resize: true,
        Scroll: true,
        Seeked: true,
        Seeking: true,
        SelectionChange: true,
        Stalled: true,
        Submit: true,
        Suspend: true,
        TextInput: true,
        TimeUpdate: true,
        TouchCancel: true,
        TouchEnd: true,
        TouchMove: true,
        TouchStart: true,
        TransitionEnd: true,
        VolumeChange: true,
        Waiting: true,
        Wheel: true
    };

    function trigger(elem, name, props) {
        var document = elem != null && elem === elem.window ? elem.document : elem.nodeType === 9 ? elem : elem.ownerDocument;

        if (/^key/.test(name)) {
            // http://stackoverflow.com/questions/10455626/keydown-simulation-in-chrome-fires-normally-but-not-the-correct-key/10520017#10520017
            var oEvent = document.createEvent("KeyboardEvent");

            // Chromium Hack
            Object.defineProperty(oEvent, "charCode", {
                get: function() {
                    return this.keyCodeVal;
                }
            });
            Object.defineProperty(oEvent, "keyCode", {
                get: function() {
                    return this.keyCodeVal;
                }
            });
            Object.defineProperty(oEvent, "which", {
                get: function() {
                    return this.keyCodeVal;
                }
            });

            if (oEvent.initKeyboardEvent) {
                oEvent.initKeyboardEvent(name, true, true, document.defaultView, false, false, false, false, props, props);
            } else {
                oEvent.initKeyEvent(name, true, true, document.defaultView, false, false, false, false, props, 0);
            }

            oEvent.keyCodeVal = props;

            if (oEvent.keyCode !== props) {
                alert("keyCode mismatch " + oEvent.keyCode + "(" + oEvent.which + ")");
            }

            elem.dispatchEvent(oEvent);
            return;
        }

        var nativeEvent = document.createEvent("Event");
        nativeEvent.initEvent(name, true, true);
        elem.dispatchEvent(nativeEvent);
    }

    return function(vrdom) {
        var isEventSupported = vrdom.functions && vrdom.functions.isEventSupported || (function() {
            var globalDocument = document;
            var hasProp = Object.prototype.hasOwnProperty;

            // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
            var TAGNAMES = {
                "select": "input",
                "change": "input",
                "submit": "form",
                "reset": "form",
                "error": "img",
                "load": "img",
                "abort": "img"
            };

            return function isEventSupported(eventName) {
                var tagName = hasProp.call(TAGNAMES, eventName) ? TAGNAMES[eventName] : "div";
                var el = globalDocument.createElement(tagName);
                eventName = "on" + eventName;

                var isSupported = eventName in el;

                if (!isSupported) {
                    el.setAttribute(eventName, "return;");
                    isSupported = typeof el[eventName] === "function";
                }

                el = null;

                // https://connect.microsoft.com/IE/feedback/details/782835/missing-onwheel-attribute-for-the-wheel-event-although-its-supported-via-addeventlistener
                // https://github.com/nolimits4web/Swiper/blob/master/src/js/mousewheel.js
                if (!isSupported && eventName === "onwheel" &&
                    globalDocument.implementation &&
                    globalDocument.implementation.hasFeature &&
                    // always returns true in newer browsers as per the standard.
                    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
                    globalDocument.implementation.hasFeature("", "") !== true) {
                    // This is the only way to test support for the `wheel` event in IE9+.
                    isSupported = globalDocument.implementation.hasFeature("Events.wheel", "3.0");
                }

                return isSupported;
            };
        }());

        // detect available wheel event
        var support = isEventSupported("wheel") ? "wheel" : // Modern browsers support "wheel"
            isEventSupported("mousewheel") ? "mousewheel" : // Webkit and IE support at least "mousewheel"
                "DOMMouseScroll"; // let"s assume that remaining browsers are older Firefox

        eventNames.Wheel = {
            eventType: support
        };

        var expando = vrdom.expando;
        var hasProp = Object.prototype.hasOwnProperty;
        var hasEditableValue = vrdom.functions && vrdom.functions.hasEditableValue || (function() {
            // http://www.w3schools.com/tags/att_input_type.asp
            var inputTypesWithEditableValue = {
                "color": true,
                "date": true,
                "datetime": true,
                "datetime-local": true,
                "email": true,
                "month": true,
                "number": true,
                "password": true,
                "range": true,
                "search": true,
                "tel": true,
                "text": true,
                "time": true,
                "url": true,
                "week": true
            };

            return function hasEditableValue(type, props) {
                switch (type) {
                    case "textarea":
                    case "select":
                        return true;
                    case "input":
                        return props.type == null || hasProp.call(inputTypesWithEditableValue, props.type);
                    default:
                        return false;
                }
            };
        }());

        var Triggers = {};

        function _trigger(name, domNode) {
            var currentVNode, parentNode, ref, tagName, toRemove;
            if (name === "change") {
                tagName = domNode.tagName && domNode.tagName.toLowerCase();
                if (tagName === "select" || tagName === "input" && domNode.type === "file") {
                    name = "change";
                } else if (hasEditableValue(tagName, domNode)) {
                    name = "input";
                } else if (tagName === "input" && ((ref = domNode.type) === "checkbox" || ref === "radio")) {
                    name = "click";
                }
            }

            if (domNode !== window) {
                var ownerDocument = domNode.ownerDocument;

                if (!ownerDocument.body.contains(domNode)) {
                    toRemove = true;
                    parentNode = domNode;
                    while (parentNode.parentNode) {
                        parentNode = parentNode.parentNode;
                    }
                    ownerDocument.body.appendChild(parentNode);
                }

                if (hasProp.call(domNode, expando)) {
                    currentVNode = domNode[expando].currentElement;
                }
            }

            trigger(domNode, name, "E".charCodeAt(0));

            if (toRemove) {
                if (parentNode) {
                    domNode = parentNode;
                } else if (currentVNode) {
                    domNode = vrdom.findDOMNode(currentVNode.key);
                }
                domNode.parentNode.removeChild(domNode);
            }
        }

        var evConfig, eventType;

        // eslint-disable-next-line guard-for-in
        for (var name in eventNames) {
            evConfig = eventNames[name];
            name = name.toLowerCase();
            if (evConfig === true) {
                eventType = name;
            } else {
                eventType = evConfig.eventType;
            }
            Triggers[name] = _trigger.bind(null, eventType);
        }

        return Triggers;
    };
}