```
import * as _ from "%{amd: 'lodash', common: 'lodash', brunch: '!_', node: 'lodash'}";
```

letters = do ->
    letters = new Array(26)

    for i in [0...26] by 1
        letters[i] = String.fromCharCode(97 + i)

    return letters

generateName = (len, minLen, maxLen)->
    if not len
        len = minLen + Math.random() * (maxLen - minLen)
        len = len >> 0

    name = new Array(len)
    for i in [0...len] by 1
        letter = letters[(25 * Math.random()) >> 0]
        name[i] = letter

    return name.join('')

generateUser = (len, minLen, maxLen)->
    user = {
        id: _.uniqueId('user')
        firstName: generateName(len, minLen, maxLen)
        lastName: generateName(len, minLen, maxLen).toUpperCase()
        age: 15 + (Math.random() * 60) >> 0
    }

    user.firstName = user.firstName[0].toUpperCase() + user.firstName.slice(1)
    return user

toInteger = (value, _default)->
    switch typeof value
        when "string"
            if /^\s*\d+\s*$/.test(value)
                return parseInt(value, 10)
        when "number"
            return value

    return _default

module.exports = (vrdom)->
    class ArrayComponent extends vrdom.Component
        componentWillMount: ->
            { len, maxLen, minLen, n, add, change, remove } = this.props

            if not minLen
                minLen = 3

            if not maxLen
                maxLen = 8

            if maxLen < minLen
                _minLen = maxLen
                maxLen = minLen
                minLen = _minLen

            n = toInteger(n, 20)
            add = toInteger(add, n)
            change = toInteger(change, 3 * n)
            remove = toInteger(remove, n)

            if remove > (n + add)
                remove = n + add

            users = @users = new Array(n)
            for i in [0...n] by 1
                users[i] = generateUser(len, minLen, maxLen)
            users.generateUser = generateUser.bind(null, len, minLen, maxLen)

            childNodes = users.map(this.childNode)

            this.state = {
                users
                childNodes
                add
                change
                remove
                length: users.length
            }

            return

        addChild: ->
            { users, childNodes, length } = this.state
            at = (Math.random() * length) >> 0

            user = users.generateUser()
            users.splice(at, 0, user)

            childNode = this.childNode(user)
            childNodes.splice(at, 0, childNode)

            this.setState({length: ++length})
            return

        changeChild: ->
            { users, childNodes, length } = this.state
            from = (Math.random() * (length - 1)) >> 0
            to = (Math.random() * (length - 1)) >> 0

            user = users.splice(from, 1)[0]
            users.splice(to, 0, user)

            childNode = childNodes.splice(from, 1)[0]
            childNodes.splice(to, 0, childNode)

            this.setState({length: length})
            return

        removeChild: ->
            { users, childNodes, length } = this.state
            at = (Math.random() * length) >> 0

            users.splice(at, 1)

            childNodes.splice(at, 1)

            this.setState({length: --length})
            return

        childNode: (user)->
            `<tr className="user" key={ user.id }>
                <td className="id">{ user.id }</td>
                <td>{ user.firstName }</td>
                <td>{ user.lastName }</td>
                <td>{ user.age }</td>
            </tr>`

        render: ->
            `<table className="table striped" style={ { tableLayout: 'fixed' } }>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>First name</th>
                        <th>Last name</th>
                        <th>Age</th>
                    </tr>
                </thead>
                <tbody className="users">{ this.state.childNodes }</tbody>
            </table>`
