function fvrdom() {
    var slice = Array.prototype.slice;

    function SortedArray() {
        var end = arguments.length;

        if ("function" === typeof arguments[end - 1]) {
            this.comparator = arguments[end - 1];
            --end;
        }

        var args = slice.call(arguments, 0, end).sort(this.comparator);
        var instance = Array.apply([], args);

        if (!(this instanceof SortedArray)) {
            var ret = new SortedArray();
            ret.instance = instance;
            return ret;
        }

        this.instance = instance;
    }

    SortedArray.prototype.push = function() {
        var instance = this.instance;
        var comparator = this.comparator;

        var values = slice.call(arguments);
        var value, at;

        for (var i = 0, len = values.length; i < len; i++) {
            value = values[i];
            at =  binarySearchInsert(value, instance, comparator);
            instance.splice(at, 0, value);
        }

        return instance.length;
    };

    SortedArray.prototype.sort = function() {
        this.instance.sort(this.comparator);
        return this;
    };

    for (var name in Array.prototype) {
        proxyMethod(name);
    }

    function proxyMethod(name) {
        if ('function' === typeof Array.prototype[name] && !SortedArray.prototype.hasOwnProperty(name)) {
            SortedArray.prototype[name] = function() {
                var instance = this.instance;
                var method = instance[name];
                var res = method.apply(instance, arguments);

                if (res === instance) {
                    return this;
                }

                if (!(res instanceof Array)) {
                    return res;
                }

                return SortedArray.apply(null, res.concat(this.comparator));
            }
        }
    }

    function binarySearchInsert(value, models, compare) {
        if (!compare) {
            return models.length;
        }

        var cmp, high, index, length, low, mid, model;
        length = high = models.length;
        low = 0;

        while (low !== high) {
            mid = (low + high) >>> 1;
            model = models[mid];

            cmp = compare(model, value);

            if (cmp > 0) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        index = low;
        if (index < length) {
            model = models[index];

            if (compare(model, value) <= 0) {
                return ++index;
            }
        }

        if (index > 1) {
            model = models[index - 1];

            if (compare(model, value) > 0) {
                return --index;
            }
        }

        return index;
    }

    return SortedArray;
}