`
/** @jsx React.createElement */
/** @babel-plugin-transform-react-display-name { "pragma": "React.createClass", "value": "displayName" } */
`
```
import * as _ from "%{amd: 'lodash', common: 'lodash', brunch: '!_', node: 'lodash'}";
import $ from "%{amd: 'jquery', common: 'jquery', brunch: '!jQuery'}";
import _ArrayComponent from "./ArrayComponent";
```

series = (tasks, done)->
    length = tasks.length
    i = 0

    iterate = (err)->
        if err or i is length
            done(err) if 'function' is typeof done
            return

        task = tasks[i++]
        task iterate
        return

    iterate()
    return

eachRepeat = (length, callback, done)->
    i = 0

    iterate = (err)->
        if err or i is length
            done(err) if 'function' is typeof done
            return

        callback i++, iterate
        return

    iterate()
    return

assertCoherent = (models, children, done)->
    # timeout to let redraw happened
    setTimeout ->
        expectedIds = models.map (user)-> user.id
        actualIds = _.map children, (tr)-> tr.children[0].innerHTML

        msg = 'passed'
        for id, i in actualIds
            if id isnt expectedIds[i]
                err = 'failed at index ' + i
                msg = 'failed'
                break

        done err, msg, actualIds, expectedIds
        return
    , 2
    return

run = (props, React, ReactDOM, done)->
    ArrayComponent = _ArrayComponent(React)

    container = document.createElement('div')
    document.body.appendChild(container)

    # preload
    ReactDOM.render(`<ArrayComponent n="5" />`, container)
    ReactDOM.unmountComponentAtNode(container)

    # run
    instance = ReactDOM.render(`<ArrayComponent {...props} />`, container)

    { users, add, change, remove } = instance.state
    models = users

    addPerformance = 0
    changePerformance = 0
    removePerformance = 0

    children = $('table > tbody.users')[0].children

    series [
        (next)->
            assertCoherent(models, children, next)
            return

        (next)->
            t0 = performance.now()
            eachRepeat add, (i, next)->
                instance.addChild()
                assertCoherent(models, children, next)
                return
            , (err)->
                t1 = performance.now()
                addPerformance += (t1 - t0)
                next(err)
                return

            return

        (next)->
            t0 = performance.now()
            eachRepeat change, (i, next)->
                instance.changeChild()
                assertCoherent(models, children, next)
                return
            , (err)->
                t1 = performance.now()
                changePerformance += (t1 - t0)
                next(err)
                return

            return

        (next)->
            t0 = performance.now()
            eachRepeat remove, (i, next)->
                instance.removeChild()
                assertCoherent(models, children, next)
                return
            , (err)->
                t1 = performance.now()
                removePerformance += (t1 - t0)
                next(err)
                return

            return

    ], (err)->
        result = {
            status: err or 'passed'
            add: [addPerformance, 'ms'].join(' ')
            change: [changePerformance, 'ms'].join(' ')
            remove: [removePerformance, 'ms'].join(' ')
        }

        ReactDOM.unmountComponentAtNode(container)
        container = null
        done(err, result)
        return

    return

module.exports = (libraries, props, done)->
    createTask = (name, [React, ReactDOM], props, results)->
        (next)->
            run props, React, ReactDOM, (err, result)->
                results[name] = result
                next()
                return
            return

    results = {};
    tasks = [];
    for name, args of libraries
        tasks.push createTask(name, args, props, results)

    series tasks, (err)->
        done(err, results)
        return

    return
