{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:/webpack/bootstrap 181fdd0702524000f1cb","webpack:///devtools/devtools.js","webpack:/external {\"amd\":\"vrdom\",\"commonjs\":\"vrdom\",\"commonjs2\":\"vrdom\",\"root\":\"vrdom\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_1__","__webpack_require__","moduleId","installedModules","id","loaded","modules","call","m","c","p","toReactDOMComponent","vnode","inst","_tag","type","_currentElement","element","children","_hostNode","node","_renderedChildren","canonicalKey","push","toReactComponent","Object","assign","getName","_inDevTools","toReactTextComponent","text","_stringText","toReactCompositeComponent","hasProp","defineProperty","enumerable","configurable","get","set","isStateless","thunk","_type","_instance","component","_context","context","props","refs","state","name","getDisplayName","_renderedComponent","toReactTopLevelWrapper","roots","Mount","Reconciler","toReactWrapper","wrapper","_rootID","key","ReactTopLevelWrapper","child","ref","rootID","_renderNewRootComponent","mountComponent","instance","visitNonCompositeChildren","childInst","noUpdate","_reactInternalInstance","instanceMap","has","isWidget","isVNode","findRoots","childNodes","i","len","length","expando","rootVNode","createDevToolsBridge","_instancesByReactRootID","performUpdateIfNecessary","receiveComponent","unmountComponent","document","body","ComponentTree","getNodeFromInstance","getClosestInstanceFromNode","parentNode","map","nodeMap","vrdomID","componentDidMount","isRootVNode","componentDidUpdate","prevRenderedChildren","forEach","contains","delete","componentWillUnmount","visitor","Array","isArray","parent","register","__REACT_DEVTOOLS_GLOBAL_HOOK__","registered","bridge","componentDidMountHook","componentDidUpdateHook","componentWillUnmountHook","inject","hooks","appendHook","unregister","removeHook","vrdom","functions","Component","isReactTopLevelWrapper","Map"],"mappings":"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","file":"dist/devtools.min.js","sourceRoot":"","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"vrdom\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"vrdom\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"devtools\"] = factory(require(\"vrdom\"));\n\telse\n\t\troot[\"devtools\"] = factory(root[\"vrdom\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 181fdd0702524000f1cb","/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n\n/* eslint-disable valid-jsdoc, no-empty-function */\n\nconst vrdom = require(\"vrdom\"),\n    expando = vrdom.expando,\n    nodeMap = vrdom.nodeMap,\n    functions = vrdom.functions,\n    getDisplayName = functions.getDisplayName,\n    hasProp = functions.hasProp,\n    hooks = vrdom.hooks;\n\n/**\n * Transform a virtual node to a ReactDOMComponent compatible object\n * \n * @param  {VirtualNode|VirtualText|ComponentWidget} vnode Virtual node to transform\n * @param  {ReactInternalInstance}                   inst  Transformed object\n * \n * @return {ReactInternalInstance}                   Transformed object\n */\nfunction toReactDOMComponent(vnode, inst) {\n    let _tag = vnode.type;\n    let _currentElement = vnode.element;\n    let children = vnode.children;\n    let _hostNode = vnode.node;\n    let _renderedChildren;\n\n    if (children !== null && \"object\" === typeof children) {\n        _renderedChildren = [];\n        for (let canonicalKey in children) { // eslint-disable-line guard-for-in\n            _renderedChildren.push(toReactComponent(children[canonicalKey]));\n        }\n    }\n\n    Object.assign(inst, {\n        // --- ReactDOMComponent interface\n        getName() {\n            return _tag;\n        },\n        _currentElement: _currentElement,\n        _hostNode: _hostNode,\n        _renderedChildren: _renderedChildren,\n\n        _inDevTools: false,\n        vnode: vnode\n    });\n\n    return inst;\n}\n\n\n/**\n * Transform a virtual node to a ReactTextComponent compatible object\n * \n * @param  {VirtualNode|VirtualText|ComponentWidget} vnode Virtual node to transform\n * @param  {ReactInternalInstance}                   inst  Transformed object\n * \n * @return {ReactInternalInstance}                   Transformed object\n */\nfunction toReactTextComponent(vnode, inst) {\n    Object.assign(inst, {\n        _currentElement: vnode.text,\n        _stringText: vnode.text,\n        _hostNode: vnode.node,\n\n        _inDevTools: false,\n        vnode: vnode\n    });\n\n    return inst;\n}\n\n/**\n * Transform a virtual node to a ReactCompositeComponent compatible object\n * \n * @param  {VirtualNode|VirtualText|ComponentWidget} vnode Virtual node to transform\n * @param  {ReactInternalInstance}                   inst  Transformed object\n * \n * @return {ReactInternalInstance}                   Transformed object\n */\nfunction toReactCompositeComponent(vnode, inst) {\n    // forceUpdate set _currentElement\n    if (!hasProp.call(inst, \"_currentElement\")) {\n        Object.defineProperty(inst, \"_currentElement\", {\n            enumerable: true, // available in for ... in\n            configurable: true, // can be deleted and reconfigured\n\n            get: function() {\n                return this.vnode.element;\n            },\n\n            set: function(element) {\n                this.vnode.element = element;\n            }\n        });\n    }\n\n    const isStateless = vnode.thunk._type === \"Stateless\";\n    let _instance = vnode.thunk.component;\n    let _currentElement = vnode.element;\n    let _context;\n\n    if (isStateless) {\n        _context = vnode.context;\n        _instance = {\n            context: _context,\n            props: _currentElement.props,\n            refs: {},\n            state: null\n        };\n    }\n\n    const name = getDisplayName(_currentElement.type);\n\n    Object.assign(inst, {\n        getName() {\n            return name;\n        },\n        _hostNode: vnode.node,\n        _context: _context,\n        _instance: _instance,\n        _renderedComponent: toReactComponent(vnode.thunk.vnode),\n\n        vnode: vnode\n    });\n\n    return inst;\n}\n\nclass ReactTopLevelWrapper extends vrdom.Component {\n    render() {\n        return this.props.child;\n    }\n}\n\nReactTopLevelWrapper.isReactTopLevelWrapper = true;\n\n/**\n * Transform a virtual node to a ReactTopLevelWrapper compatible object\n * \n * @param  {VirtualNode|VirtualText|ComponentWidget} vnode      virtual node to transform\n * @param  {Object}                                  roots      roots dictionary\n * @param  {Object}                                  Mount      Mount object\n * @param  {Object}                                  Reconciler Reconciler object\n * \n * @return {ReactTopLevelWrapper}                    ReactTopLevelWrapper compatible object\n */\nfunction toReactTopLevelWrapper(vnode, roots, Mount, Reconciler) {\n    let _renderedComponent = toReactWrapper(vnode, Mount, Reconciler);\n    if (_renderedComponent.wrapper) {\n        return _renderedComponent.wrapper;\n    }\n\n    let wrapper = {\n        _rootID: vnode.key,\n        _renderedComponent: _renderedComponent,\n        _currentElement: {\n            type: ReactTopLevelWrapper,\n            props: {\n                child: _renderedComponent._currentElement\n            },\n            key: null,\n            ref: null\n        },\n        _instance: {\n            context: vnode.context,\n            props: {\n                child: _renderedComponent._currentElement\n            },\n            refs: {},\n            rootID: vnode.key,\n            state: null\n        },\n        // _hostContainerInfo: getHostContainerInfo(vnode)\n    };\n\n    roots[wrapper._rootID] = wrapper;\n    _renderedComponent.wrapper = wrapper;\n    Mount._renderNewRootComponent(wrapper);\n    Reconciler.mountComponent(wrapper);\n    return wrapper;\n}\n\n/**\n * [toReactWrapper description]\n * \n * @param  {VirtualNode|VirtualText|ComponentWidget} vnode      virtual node to transform\n * @param  {Object}                                  Mount      Mount object\n * @param  {Object}                                  Reconciler Reconciler object\n * \n * @return {[type]}            [description]\n */\nfunction toReactWrapper(vnode, Mount, Reconciler) {\n    let instance = toReactComponent(vnode);\n\n    visitNonCompositeChildren(instance, childInst => {\n        childInst._inDevTools = true;\n        Reconciler.mountComponent(childInst);\n    });\n    Reconciler.mountComponent(instance);\n\n    return instance;\n}\n\n/**\n * Map of Component|Node to ReactDOMComponent|ReactCompositeComponent-like\n * object.\n *\n * The same React*Component instance must be used when notifying devtools\n * about the initial mount of a component and subsequent updates.\n */\nlet instanceMap = new Map();\n\n/**\n * Transform a virtual node to a ReactComponent compatible object\n * \n * @param  {VirtualNode|VirtualText|ComponentWidget} vnode    virtual node to transform\n * @param  {Boolean}                                 noUpdate do not update\n * \n * @return {[type]}                                  ReactComponent compatible object\n */\nfunction toReactComponent(vnode, noUpdate) {\n    if (vnode == null) {\n        return null;\n    }\n\n    if (noUpdate) {\n        return vnode._reactInternalInstance;\n    }\n\n    let inst;\n\n    if (instanceMap.has(vnode.key)) {\n        inst = instanceMap.get(vnode.key);\n    } else {\n        inst = {};\n        instanceMap.set(vnode.key, inst);\n    }\n\n    if (vnode.isWidget) {\n        toReactCompositeComponent(vnode, inst);\n    } else if (vnode.isVNode) {\n        toReactDOMComponent(vnode, inst);\n    } else {\n        toReactTextComponent(vnode, inst);\n    }\n\n    vnode._reactInternalInstance = inst;\n    return inst;\n}\n/**\n * Find all root component instances rendered by vrdom in `node`'s children\n * and add them to the `roots` map.\n *\n * @param {DOMElement} node\n * @param {[key: string] => ReactDOMComponent|ReactCompositeComponent}\n */\nfunction findRoots(childNodes, roots, Mount, Reconciler) {\n    for (let i = 0, len = childNodes.length; i < len; i++) {\n        let child = childNodes[i];\n        if (!hasProp.call(child, expando) || !hasProp.call(child[expando], \"rootVNode\")) {\n            findRoots(child.childNodes, roots, Mount, Reconciler);\n        } else {\n            let rootVNode = child[expando].rootVNode;\n            toReactTopLevelWrapper(rootVNode, roots, Mount, Reconciler);\n        }\n    }\n}\n\n/**\n * Create a bridge for exposing vrdom's component tree to React DevTools.\n *\n * It creates implementations of the interfaces that ReactDOM passes to\n * devtools to enable it to query the component tree and hook into component\n * updates.\n *\n * See https://github.com/facebook/react/blob/59ff7749eda0cd858d5ee568315bcba1be75a1ca/src/renderers/dom/ReactDOM.js\n * for how ReactDOM exports its internals for use by the devtools and\n * the `attachRenderer()` function in\n * https://github.com/facebook/react-devtools/blob/e31ec5825342eda570acfc9bcb43a44258fceb28/backend/attachRenderer.js\n * for how the devtools consumes the resulting objects.\n */\nfunction createDevToolsBridge() {\n    // The devtools has different paths for interacting with the renderers from\n    // React Native, legacy React DOM and current React DOM.\n    //\n    // Here we emulate the interface for the current React DOM (v15+) lib.\n\n    // Map of root ID (the ID is unimportant) to component instance.\n    let roots = {};\n\n    // ReactMount-like object\n    //\n    // Used by devtools to discover the list of root component instances and get\n    // notified when new root components are rendered.\n    const Mount = {\n        _instancesByReactRootID: roots,\n\n        // Stub - React DevTools expects to find this method and replace it\n        // with a wrapper in order to observe new root components being added\n        _renderNewRootComponent(/* instance, ... */) { }\n    };\n\n    // ReactReconciler-like object\n    const Reconciler = {\n        // Stubs - React DevTools expects to find these methods and replace them\n        // with wrappers in order to observe components being mounted, updated and\n        // unmounted\n        mountComponent(/* instance, ... */) { },\n        performUpdateIfNecessary(/* instance, ... */) { },\n        receiveComponent(/* instance, ... */) { },\n        unmountComponent(/* instance, ... */) { }\n    };\n\n    findRoots(document.body.childNodes, roots, Mount, Reconciler);\n\n    // ReactDOMComponentTree-like object\n    const ComponentTree = {\n        getNodeFromInstance(instance) {\n            return instance._hostNode;\n        },\n        getClosestInstanceFromNode(node) {\n            while (node && !hasProp.call(node, expando)) {\n                node = node.parentNode;\n            }\n\n            if (node == null) {\n                return null;\n            }\n\n            if (node[expando].rootVNode) {\n                return toReactTopLevelWrapper(node[expando].rootVNode, roots, Mount, Reconciler);\n            }\n\n            let map = nodeMap[node[expando].vrdomID];\n            if (map == null) {\n                return null;\n            }\n\n            return toReactComponent(map.vnode, true);\n        }\n    };\n\n    const componentDidMount = vnode => {\n        if (isRootVNode(vnode)) {\n            toReactTopLevelWrapper(vnode, roots, Mount, Reconciler);\n            return;\n        }\n\n        toReactWrapper(vnode, Mount, Reconciler);\n    };\n\n    const componentDidUpdate = vnode => {\n        const prevRenderedChildren = [];\n        visitNonCompositeChildren(instanceMap.get(vnode.key), childInst => {\n            prevRenderedChildren.push(childInst);\n        });\n\n        // Notify devtools about updates to this vnode and any non-composite\n        // children\n        const instance = toReactComponent(vnode);\n        Reconciler.receiveComponent(instance);\n        visitNonCompositeChildren(instance, childInst => {\n            if (!childInst._inDevTools) {\n                // New DOM child vnode\n                childInst._inDevTools = true;\n                Reconciler.mountComponent(childInst);\n            } else {\n                // Updated DOM child vnode\n                Reconciler.receiveComponent(childInst);\n            }\n        });\n\n        // For any non-composite children that were removed by the latest render,\n        // remove the corresponding ReactDOMComponent-like instances and notify\n        // the devtools\n        prevRenderedChildren.forEach(childInst => {\n            if (!document.body.contains(childInst._hostNode)) {\n                instanceMap.delete(childInst.vnode);\n                Reconciler.unmountComponent(childInst);\n                delete childInst._hostNode;\n                delete childInst.vnode;\n            }\n        });\n    };\n\n    const componentWillUnmount = vnode => {\n        let instance = toReactComponent(vnode);\n\n        visitNonCompositeChildren(childInst => {\n            instanceMap.delete(childInst.vnode);\n            Reconciler.unmountComponent(childInst);\n            delete childInst._hostNode;\n            delete childInst.vnode;\n        });\n\n        Reconciler.unmountComponent(instance);\n\n        instanceMap.delete(vnode.key);\n        if (instance._rootID) {\n            delete roots[instance._rootID];\n        }\n        delete instance._hostNode;\n        delete instance.vnode;\n        delete vnode._reactInternalInstance;\n\n        if (isRootVNode(vnode)) {\n            instance = toReactTopLevelWrapper(instance, roots, Mount, Reconciler);\n            Reconciler.unmountComponent(instance);\n            delete instance._hostNode;\n            delete instance.vnode;\n            delete vnode._reactInternalInstance;\n        }\n    };\n\n    return {\n        componentDidMount,\n        componentDidUpdate,\n        componentWillUnmount,\n\n        // Interfaces passed to devtools via __REACT_DEVTOOLS_GLOBAL_HOOK__.inject()\n        ComponentTree,\n        Mount,\n        Reconciler\n    };\n}\n\n/**\n * Visit all child instances of a ReactCompositeComponent-like object that are\n * not composite components (ie. they represent DOM elements or text)\n *\n * @param {ReactInternalComponent} instance\n * @param {(ReactInternalComponent) => void} visitor\n */\nfunction visitNonCompositeChildren(instance, visitor) {\n    if (instance._renderedComponent) {\n        visitNonCompositeChildren(instance._renderedComponent, visitor);\n    } else if (hasProp.call(instance, \"_renderedChildren\")) {\n        visitor(instance);\n\n        if (Array.isArray(instance._renderedChildren)) {\n            instance._renderedChildren.forEach(childInst => {\n                visitNonCompositeChildren(childInst, visitor);\n            });\n        }\n    }\n}\n\n/**\n * Return `true` if a vrdom vnode is a top level vnode rendered by\n * `render()` into a container Element.\n */\nfunction isRootVNode(vnode) {\n    return !vnode.parent;\n}\n\nlet registered = false;\nlet componentDidMountHook, componentDidUpdateHook, componentWillUnmountHook;\n\n/**\n * Create a bridge between the vrdom component tree and React's dev tools\n * and register it.\n *\n * After this function is called, the React Dev Tools should be able to detect\n * \"React\" on the page and show the component tree.\n *\n * This function hooks into vrdom VNode creation in order to expose functional\n * components correctly, so it should be called before the root component(s)\n * are rendered.\n */\nexport function register() {\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\" || registered) {\n        // React DevTools are not installed\n        return;\n    }\n\n    const bridge = createDevToolsBridge();\n    componentDidMountHook = bridge.componentDidMount;\n    componentDidUpdateHook = bridge.componentDidUpdate;\n    componentWillUnmountHook = bridge.componentWillUnmount;\n\n    // Notify devtools about this instance of \"React\"\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.inject(bridge);\n\n    hooks.appendHook(\"componentDidMount\", componentDidMountHook);\n    hooks.appendHook(\"componentDidUpdate\", componentDidUpdateHook);\n    hooks.appendHook(\"componentWillUnmount\", componentWillUnmountHook);\n\n    registered = true;\n}\n\nexport function unregister() {\n    if (registered) {\n        hooks.removeHook(\"componentDidMount\", componentDidMountHook);\n        hooks.removeHook(\"componentDidUpdate\", componentDidUpdateHook);\n        hooks.removeHook(\"componentWillUnmount\", componentWillUnmountHook);\n\n        registered = false;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./../../../devtools/devtools.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"amd\":\"vrdom\",\"commonjs\":\"vrdom\",\"commonjs2\":\"vrdom\",\"root\":\"vrdom\"}\n// module id = 1\n// module chunks = 0"]}